import{_ as n,c as s,o as a,a as t}from"./app.fa011131.js";const g='{"title":"vuex\u6E90\u78015\uFF1Aplugin \u63D2\u4EF6\u5B9E\u73B0","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u63D2\u4EF6\u6CE8\u518C","slug":"\u63D2\u4EF6\u6CE8\u518C"},{"level":2,"title":"\u63D2\u4EF6\u5B9E\u73B0","slug":"\u63D2\u4EF6\u5B9E\u73B0"},{"level":3,"title":"\u63D2\u4EF6\u6E90\u7801","slug":"\u63D2\u4EF6\u6E90\u7801"},{"level":2,"title":"\u5185\u7F6E\u63D2\u4EF6 logger","slug":"\u5185\u7F6E\u63D2\u4EF6-logger"},{"level":3,"title":"\u4F7F\u7528\u65B9\u5F0F\uFF1A","slug":"\u4F7F\u7528\u65B9\u5F0F\uFF1A"},{"level":3,"title":"\u5B9E\u73B0\u6E90\u7801","slug":"\u5B9E\u73B0\u6E90\u7801"}],"relativePath":"FE-Framework/vue-technology-source-code/vuex-source-code-5-plugin.md"}',p={},o=t(`<h1 id="vuex\u6E90\u78015\uFF1Aplugin-\u63D2\u4EF6\u5B9E\u73B0" tabindex="-1">vuex\u6E90\u78015\uFF1Aplugin \u63D2\u4EF6\u5B9E\u73B0 <a class="header-anchor" href="#vuex\u6E90\u78015\uFF1Aplugin-\u63D2\u4EF6\u5B9E\u73B0" aria-hidden="true">#</a></h1><p><div class="table-of-contents"><ul><li><a href="#\u63D2\u4EF6\u6CE8\u518C">\u63D2\u4EF6\u6CE8\u518C</a></li><li><a href="#\u63D2\u4EF6\u5B9E\u73B0">\u63D2\u4EF6\u5B9E\u73B0</a><ul><li><a href="#\u63D2\u4EF6\u6E90\u7801">\u63D2\u4EF6\u6E90\u7801</a></li></ul></li><li><a href="#\u5185\u7F6E\u63D2\u4EF6-logger">\u5185\u7F6E\u63D2\u4EF6 logger</a><ul><li><a href="#\u4F7F\u7528\u65B9\u5F0F\uFF1A">\u4F7F\u7528\u65B9\u5F0F\uFF1A</a></li><li><a href="#\u5B9E\u73B0\u6E90\u7801">\u5B9E\u73B0\u6E90\u7801</a></li></ul></li></ul></div></p><p>Vuex \u9664\u4E86\u63D0\u4F9B\u7684\u5B58\u53D6\u80FD\u529B\uFF0C\u8FD8\u63D0\u4F9B\u4E86\u4E00\u79CD\u63D2\u4EF6\u80FD\u529B\uFF0C\u8BA9\u6211\u4EEC\u53EF\u4EE5\u76D1\u63A7 store \u7684\u53D8\u5316\u8FC7\u7A0B\u6765\u505A\u4E00\u4E9B\u4E8B\u60C5\u3002</p><p>store \u7684\u53D8\u5316\uFF0C\u53EF\u4EE5 commit \u63D0\u4EA4 mutaion \u65B9\u6CD5\u76F4\u63A5\u6539\u53D8 state\uFF0C\u4E5F\u53EF\u4EE5\u662F dispatch \u89E6\u53D1 action \u65B9\u6CD5\u95F4\u63A5\u4FEE\u6539 state \u3002</p><p>\u6240\u4EE5 vuex \u5185\u90E8\u5B9E\u73B0\u4E86\u63D2\u4EF6\u53EF\u4EE5\u5206\u522B\u8BA2\u9605 mutation \u548C actions \u7684\u6267\u884C\uFF0C\u6765\u5B9E\u73B0\u76D1\u542C\u3002\u57FA\u672C\u5B9E\u73B0\u903B\u8F91\u5C31\u662F\u4E00\u4E2A \u53D1\u5E03-\u8BA2\u9605 \u7684\u8BBE\u8BA1\u6A21\u5F0F\u3002</p><h2 id="\u63D2\u4EF6\u6CE8\u518C" tabindex="-1">\u63D2\u4EF6\u6CE8\u518C <a class="header-anchor" href="#\u63D2\u4EF6\u6CE8\u518C" aria-hidden="true">#</a></h2><p>Vuex \u7684 store \u63A5\u53D7 plugins \u9009\u9879\uFF0C\u6211\u4EEC\u5728\u5B9E\u4F8B\u5316 Store \u7684\u65F6\u5019\u53EF\u4EE5\u4F20\u5165\u63D2\u4EF6\uFF0C\u5B83\u662F\u4E00\u4E2A\u6570\u7EC4\uFF0C\u6240\u4EE5\u53EF\u4EE5\u4F20\u5165\u591A\u4E2A\u63D2\u4EF6\u3002</p><div class="language-js"><pre><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  state<span class="token punctuation">,</span>
  getters<span class="token punctuation">,</span>
  mutations<span class="token punctuation">,</span>
  actions<span class="token punctuation">,</span>
  modules<span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>myPlugin<span class="token punctuation">,</span> logger<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="\u63D2\u4EF6\u5B9E\u73B0" tabindex="-1">\u63D2\u4EF6\u5B9E\u73B0 <a class="header-anchor" href="#\u63D2\u4EF6\u5B9E\u73B0" aria-hidden="true">#</a></h2><p>Vuex \u63D2\u4EF6\u5C31\u662F\u4E00\u4E2A\u51FD\u6570\uFF0C\u5B83\u63A5\u6536 store \u4F5C\u4E3A\u552F\u4E00\u53C2\u6570\uFF1A</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">myPlugin</span> <span class="token operator">=</span> <span class="token parameter">store</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> removeMutationPlugin <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6BCF\u6B21 mutation \u4E4B\u540E\u8C03\u7528</span>
    <span class="token comment">// mutation \u7684\u683C\u5F0F\u4E3A { type, payload }</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> removeActionPlugin <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">actionsSubscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6BCF\u6B21 action \u4E4B\u540E\u8C03\u7528</span>
    <span class="token comment">// action \u683C\u5F0F { type, payload }</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u63D2\u4EF6\u6E90\u7801" tabindex="-1">\u63D2\u4EF6\u6E90\u7801 <a class="header-anchor" href="#\u63D2\u4EF6\u6E90\u7801" aria-hidden="true">#</a></h3><p>\u6240\u4EE5\u770B\u4E0B vuex \u6E90\u7801\u5BF9\u63D2\u4EF6\u7684\u5B9E\u73B0\u903B\u8F91\uFF1A</p><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7701\u7565\u4EE3\u7801...</span>

    <span class="token comment">// \u5B58\u5165\u63D2\u4EF6\u51FD\u6570</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u9488\u5BF9 mutaions \u6267\u884C\u7684\u63D2\u4EF6</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u9488\u5BF9 actions \u6267\u884C\u7684\u63D2\u4EF6</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span>
      plugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      strict <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>

    <span class="token comment">// \u904D\u5386\u6267\u884C\u63D2\u4EF6\u51FD\u6570</span>
    plugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">plugin</span> <span class="token operator">=&gt;</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">subscribe</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genericSubscribe</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">subscribeAction</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// fn \u53EF\u4EE5\u662F\u5BF9\u8C61\uFF0C\u5206\u522B\u5B9A\u4E49 before / after / error\uFF0C\u5373\u5F53\u524D action \u65B9\u6CD5\u6267\u884C\u524D\u3001\u6267\u884C\u540E\u3001\u6267\u884C\u51FA\u9519\u65F6\u8C03\u7528\u63D2\u4EF6\u3002</span>
    <span class="token keyword">const</span> subs <span class="token operator">=</span> <span class="token keyword">typeof</span> fn <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token literal-property property">before</span><span class="token operator">:</span> fn <span class="token punctuation">}</span> <span class="token operator">:</span> fn<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">genericSubscribe</span><span class="token punctuation">(</span>subs<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genericSubscribe</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> subs<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>subs<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>prepend
      <span class="token operator">?</span> subs<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
      <span class="token operator">:</span> subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u8FD4\u56DE\u4E00\u4E2A\u79FB\u9664\u63D2\u4EF6\u7684\u51FD\u6570</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> i <span class="token operator">=</span> subs<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      subs<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u770B\u4E0B\u63D2\u4EF6\u6267\u884C\u65F6\u673A\uFF1A</p><div class="language-js"><pre><code><span class="token comment">// this._subscribe \u5728 mutation \u65B9\u6CD5\u6267\u884C\u540E\u8C03\u7528\uFF0C\u6240\u4EE5\u8C03\u7528\u65F6\u673A\u5728 commit \u51FD\u6570\u4E2D</span>
<span class="token function">commit</span> <span class="token punctuation">(</span><span class="token parameter">_type<span class="token punctuation">,</span> _payload<span class="token punctuation">,</span> _options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> options <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">unifyObjectStyle</span><span class="token punctuation">(</span>_type<span class="token punctuation">,</span> _payload<span class="token punctuation">,</span> _options<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] unknown mutation type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    entry<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">commitIterator</span> <span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">handler</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// \u9488\u5BF9 mutation \u63D2\u4EF6\u6267\u884C</span>
  <span class="token keyword">const</span> mutation <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers
    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> <span class="token function">sub</span><span class="token punctuation">(</span>mutation<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token function">dispatch</span> <span class="token punctuation">(</span><span class="token parameter">_type<span class="token punctuation">,</span> _payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">unifyObjectStyle</span><span class="token punctuation">(</span>_type<span class="token punctuation">,</span> _payload<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] unknown action type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers
      <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe</span>
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span>before<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] error in before action subscribers: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> result <span class="token operator">=</span> entry<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span>
    <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">handler</span> <span class="token operator">=&gt;</span> <span class="token function">handler</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> entry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers
          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span>after<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] error in after action subscribers: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers
          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span>error<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] error in error action subscribers: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u5185\u7F6E\u63D2\u4EF6-logger" tabindex="-1">\u5185\u7F6E\u63D2\u4EF6 logger <a class="header-anchor" href="#\u5185\u7F6E\u63D2\u4EF6-logger" aria-hidden="true">#</a></h2><p>vuex \u5BFC\u51FA\u5BF9\u8C61\u4E2D\u542B\u6709 createLogger \u51FD\u6570\uFF0C\u7528\u6765\u6CE8\u518C logger\u3000\u63D2\u4EF6\u3002</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">version</span><span class="token operator">:</span> __VERSION__<span class="token punctuation">,</span>
  Store<span class="token punctuation">,</span>
  install<span class="token punctuation">,</span>
  mapState<span class="token punctuation">,</span>
  mapGetters<span class="token punctuation">,</span>
  mapMutations<span class="token punctuation">,</span>
  mapActions<span class="token punctuation">,</span>
  createNamespacedHelpers<span class="token punctuation">,</span>
  createLogger<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="\u4F7F\u7528\u65B9\u5F0F\uFF1A" tabindex="-1">\u4F7F\u7528\u65B9\u5F0F\uFF1A <a class="header-anchor" href="#\u4F7F\u7528\u65B9\u5F0F\uFF1A" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createLogger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>createLogger \u51FD\u6570\u8C03\u7528\u652F\u6301\u4F20\u5165\u914D\u7F6E\u9879</p><div class="language-js"><pre><code><span class="token keyword">const</span> Logger <span class="token operator">=</span> <span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">collapsed</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// \u81EA\u52A8\u5C55\u5F00\u8BB0\u5F55\u7684 mutation</span>
  <span class="token literal-property property">logActions</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// \u8BB0\u5F55 action \u65E5\u5FD7</span>
  <span class="token literal-property property">logMutations</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// \u8BB0\u5F55 mutation \u65E5\u5FD7</span>
  <span class="token literal-property property">logger</span><span class="token operator">:</span> console<span class="token punctuation">,</span> <span class="token comment">// \u81EA\u5B9A\u4E49 console \u5B9E\u73B0\uFF0C\u9ED8\u8BA4\u4E3A \`console\`</span>
  <span class="token function">filter</span> <span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> stateBefore<span class="token punctuation">,</span> stateAfter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u82E5 mutation \u9700\u8981\u88AB\u8BB0\u5F55\uFF0C\u5C31\u8BA9\u5B83\u8FD4\u56DE true \u5373\u53EF</span>
    <span class="token comment">// \u987A\u4FBF\uFF0C\`mutation\` \u662F\u4E2A { type, payload } \u5BF9\u8C61</span>
    <span class="token keyword">return</span> mutation<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&quot;aBlocklistedMutation&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">actionFilter</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u548C \`filter\` \u4E00\u6837\uFF0C\u4F46\u662F\u662F\u9488\u5BF9 action \u7684</span>
    <span class="token comment">// \`action\` \u7684\u683C\u5F0F\u662F \`{ type, payload }\`</span>
    <span class="token keyword">return</span> action<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&quot;aBlocklistedAction&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">transformer</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5728\u5F00\u59CB\u8BB0\u5F55\u4E4B\u524D\u8F6C\u6362\u72B6\u6001</span>
    <span class="token comment">// \u4F8B\u5982\uFF0C\u53EA\u8FD4\u56DE\u6307\u5B9A\u7684\u5B50\u6811</span>
    <span class="token keyword">return</span> state<span class="token punctuation">.</span>subTree
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mutationTransformer</span> <span class="token punctuation">(</span><span class="token parameter">mutation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// mutation \u6309\u7167 { type, payload } \u683C\u5F0F\u8BB0\u5F55</span>
    <span class="token comment">// \u6211\u4EEC\u53EF\u4EE5\u6309\u4EFB\u610F\u65B9\u5F0F\u683C\u5F0F\u5316</span>
    <span class="token keyword">return</span> mutation<span class="token punctuation">.</span>type
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">actionTransformer</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u548C \`mutationTransformer\` \u4E00\u6837\uFF0C\u4F46\u662F\u662F\u9488\u5BF9 action \u7684</span>
    <span class="token keyword">return</span> action<span class="token punctuation">.</span>type
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>Logger<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="\u5B9E\u73B0\u6E90\u7801" tabindex="-1">\u5B9E\u73B0\u6E90\u7801 <a class="header-anchor" href="#\u5B9E\u73B0\u6E90\u7801" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">createLogger</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// options \u53C2\u6570\u63D0\u4F9B\u4E86\u4E00\u7CFB\u5217\u9ED8\u8BA4\u503C</span>
  collapsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  logMutations <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  logActions <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  logger <span class="token operator">=</span> console
  <span class="token function-variable function">transformer</span> <span class="token operator">=</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">,</span>
  <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> stateBefore<span class="token punctuation">,</span> stateAfter</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">mutationTransformer</span> <span class="token operator">=</span> <span class="token parameter">mut</span> <span class="token operator">=&gt;</span> mut<span class="token punctuation">,</span>
  <span class="token function-variable function">actionFilter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">actionTransformer</span> <span class="token operator">=</span> <span class="token parameter">act</span> <span class="token operator">=&gt;</span> act<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token parameter">store</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> prevState <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> logger <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>logMutations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>mutation<span class="token punctuation">,</span> prevState<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> formattedTime <span class="token operator">=</span> <span class="token function">getFormattedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> formattedMutation <span class="token operator">=</span> <span class="token function">mutationTransformer</span><span class="token punctuation">(</span>mutation<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mutation </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>mutation<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>formattedTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

          <span class="token function">startMessage</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> message<span class="token punctuation">,</span> collapsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
          logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;%c prev state&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;color: #9E9E9E; font-weight: bold&#39;</span><span class="token punctuation">,</span> <span class="token function">transformer</span><span class="token punctuation">(</span>prevState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;%c mutation&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;color: #03A9F4; font-weight: bold&#39;</span><span class="token punctuation">,</span> formattedMutation<span class="token punctuation">)</span><span class="token punctuation">;</span>
          logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;%c next state&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;color: #4CAF50; font-weight: bold&#39;</span><span class="token punctuation">,</span> <span class="token function">transformer</span><span class="token punctuation">(</span>nextState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">endMessage</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        prevState <span class="token operator">=</span> nextState<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>logActions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      store<span class="token punctuation">.</span><span class="token function">subscribeAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">actionFilter</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> formattedTime <span class="token operator">=</span> <span class="token function">getFormattedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> formattedAction <span class="token operator">=</span> <span class="token function">actionTransformer</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">action </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>action<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>formattedTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

          <span class="token function">startMessage</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> message<span class="token punctuation">,</span> collapsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
          logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;%c action&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;color: #03A9F4; font-weight: bold&#39;</span><span class="token punctuation">,</span> formattedAction<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">endMessage</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">startMessage</span> <span class="token punctuation">(</span><span class="token parameter">logger<span class="token punctuation">,</span> message<span class="token punctuation">,</span> collapsed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> startMessage <span class="token operator">=</span> collapsed
    <span class="token operator">?</span> logger<span class="token punctuation">.</span>groupCollapsed
    <span class="token operator">:</span> logger<span class="token punctuation">.</span>group<span class="token punctuation">;</span>

  <span class="token comment">// render</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">startMessage</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">endMessage</span> <span class="token punctuation">(</span><span class="token parameter">logger</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u2014\u2014 log end \u2014\u2014&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getFormattedTime</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> @ </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">pad</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">pad</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">pad</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">pad</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
</code></pre></div>`,26),c=[o];function e(u,l,i,k,r,d){return a(),s("div",null,c)}var f=n(p,[["render",e]]);export{g as __pageData,f as default};
