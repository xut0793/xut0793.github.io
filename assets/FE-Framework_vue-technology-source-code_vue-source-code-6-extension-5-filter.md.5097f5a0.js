import{_ as p,c as t,b as n,t as o,a,d as s,o as e}from"./app.9dbb06c5.js";const b='{"title":"\u8FC7\u6EE4\u5668 filter","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u8FC7\u6EE4\u5668\u7684\u4F7F\u7528","slug":"\u8FC7\u6EE4\u5668\u7684\u4F7F\u7528"},{"level":2,"title":"\u8FC7\u6EE4\u5668\u5E94\u7528\u5728\u63D2\u69FD\u4E2D","slug":"\u8FC7\u6EE4\u5668\u5E94\u7528\u5728\u63D2\u69FD\u4E2D"},{"level":2,"title":"\u8FC7\u6EE4\u5668\u5E94\u7528\u5728 v-bind \u4E2D","slug":"\u8FC7\u6EE4\u5668\u5E94\u7528\u5728-v-bind-\u4E2D"},{"level":2,"title":"\u8FC7\u6EE4\u5668\u7684\u6267\u884C","slug":"\u8FC7\u6EE4\u5668\u7684\u6267\u884C"}],"relativePath":"FE-Framework/vue-technology-source-code/vue-source-code-6-extension-5-filter.md"}',c={},u=a(`<h1 id="\u8FC7\u6EE4\u5668-filter" tabindex="-1">\u8FC7\u6EE4\u5668 filter <a class="header-anchor" href="#\u8FC7\u6EE4\u5668-filter" aria-hidden="true">#</a></h1><p><div class="table-of-contents"><ul><li><a href="#\u8FC7\u6EE4\u5668\u7684\u4F7F\u7528">\u8FC7\u6EE4\u5668\u7684\u4F7F\u7528</a></li><li><a href="#\u8FC7\u6EE4\u5668\u5E94\u7528\u5728\u63D2\u69FD\u4E2D">\u8FC7\u6EE4\u5668\u5E94\u7528\u5728\u63D2\u69FD\u4E2D</a></li><li><a href="#\u8FC7\u6EE4\u5668\u5E94\u7528\u5728-v-bind-\u4E2D">\u8FC7\u6EE4\u5668\u5E94\u7528\u5728 v-bind \u4E2D</a></li><li><a href="#\u8FC7\u6EE4\u5668\u7684\u6267\u884C">\u8FC7\u6EE4\u5668\u7684\u6267\u884C</a></li></ul></div></p><h2 id="\u8FC7\u6EE4\u5668\u7684\u4F7F\u7528" tabindex="-1">\u8FC7\u6EE4\u5668\u7684\u4F7F\u7528 <a class="header-anchor" href="#\u8FC7\u6EE4\u5668\u7684\u4F7F\u7528" aria-hidden="true">#</a></h2><p>\u8FC7\u6EE4\u5668\u6CE8\u518C\u4E5F\u5206\u4E3A\u5168\u5C40\u6CE8\u518C\u548C\u7EC4\u4EF6\u5185\u6CE8\u518C\uFF1A</p><div class="language-js"><pre><code><span class="token comment">// \u5168\u5C40\u6CE8\u518C</span>
Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">&#39;capitalize&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
  value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// \u7EC4\u4EF6\u5185 fitler \u9009\u9879\u6CE8\u518C</span>
<span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">capitalize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
    value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,5),l=s("\u8FC7\u6EE4\u5668\u4F7F\u7528\u53EF\u4EE5\u5728"),k=s("\u63D2\u69FD\u4E2D\uFF0C\u4E5F\u53EF\u4EE5\u5E94\u7528\u5728"),i=n("code",null,"v-bind",-1),r=s("\u8868\u8FBE\u5F0F\u4E2D\uFF1A"),d=a(`<div class="language-js"><pre><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> \u5728\u53CC\u82B1\u62EC\u53F7\u4E2D <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token operator">|</span> capitalize <span class="token punctuation">}</span><span class="token punctuation">}</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> \u5728 <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">v-bind</span><span class="token template-punctuation string">\`</span></span> \u4E2D <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>div v<span class="token operator">-</span>bind<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">&quot;rawId | formatId&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre></div><p>\u53E6\u5916\uFF0C\u5173\u4E8E\u8FC7\u6EE4\u5668\u4E24\u70B9\u4E8B\u9879\uFF1A</p><ul><li>\u8FC7\u6EE4\u5668\u5E94\u8BE5\u603B\u662F\u88AB\u6DFB\u52A0\u5728 JavaScript \u8868\u8FBE\u5F0F\u7684\u5C3E\u90E8\uFF0C\u7531\u7BA1\u9053\u7B26\u53F7<code>|</code>\u6307\u793A</li><li>\u8FC7\u6EE4\u5668\u53EF\u4EE5\u63A5\u6536\u53C2\u6570\uFF0C\u4F46\u8868\u8FBE\u5F0F\u7684\u503C\u59CB\u7EC8\u4E3A\u7B2C\u4E00\u4E2A\u53C2\u6570\u3002</li></ul><p>\u56E0\u4E3A\u8FC7\u6EE4\u5668\u6709\u4E24\u79CD\u4F7F\u7528\u573A\u666F\uFF0C\u6240\u4EE5\u4E5F\u9700\u8981\u4ECE\u4E24\u4E2A\u573A\u666F\u7684\u4EE3\u7801\u4E0A\u770B\u6E90\u7801</p><h2 id="\u8FC7\u6EE4\u5668\u5E94\u7528\u5728\u63D2\u69FD\u4E2D" tabindex="-1">\u8FC7\u6EE4\u5668\u5E94\u7528\u5728\u63D2\u69FD\u4E2D <a class="header-anchor" href="#\u8FC7\u6EE4\u5668\u5E94\u7528\u5728\u63D2\u69FD\u4E2D" aria-hidden="true">#</a></h2><p>\u9996\u5148\u9700\u8981\u77E5\u9053\u63D2\u69FD\u5728 Vue \u6E90\u7801\u4E2D\u54EA\u91CC\u88AB\u89E3\u6790\u7684\u3002\u6839\u636E\u524D\u7AEF\u7F16\u8BD1\u7AE0\u8282\u7684\u7406\u89E3\uFF0C\u63D2\u69FD\u89E3\u6790\u51FD\u6570\u7684\u8DEF\u5F84\u662F\uFF1A</p><p><code>$mount =&gt; compileToFunctions =&gt; createCompiler =&gt; baseCompile =&gt; parse =&gt; parseHTML =&gt; options.chars</code></p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">parse</span> <span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>
  <span class="token function">parseHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>
    start<span class="token punctuation">,</span>
    end<span class="token punctuation">,</span>
    comment<span class="token punctuation">,</span>
    <span class="token function-variable function">chars</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">chars</span> <span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// currentParent \u662F\u5728\u89E3\u6790\u5F00\u59CB\u6807\u7B7E\u65F6\u538B\u5165\u5806\u6808\u7684\u6808\u9876\u5143\u7D20 </span>
      <span class="token comment">// \u5728 start \u4E2D if (!unary) { currentParent = element; stack.push(element); }</span>
      <span class="token comment">// \u5728 end \u4E2D  stack.length -= 1; currentParent = stack[stack.length - 1];</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentParent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">===</span> template<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">warnOnce</span><span class="token punctuation">(</span>
              <span class="token string">&#39;Component template requires a root element, rather than just text.&#39;</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span> <span class="token literal-property property">start</span><span class="token operator">:</span> start <span class="token punctuation">}</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">warnOnce</span><span class="token punctuation">(</span>
              <span class="token punctuation">(</span><span class="token string">&quot;text \\&quot;&quot;</span> <span class="token operator">+</span> text <span class="token operator">+</span> <span class="token string">&quot;\\&quot; outside root element will be ignored.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span> <span class="token literal-property property">start</span><span class="token operator">:</span> start <span class="token punctuation">}</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// IE textarea placeholder bug</span>
      <span class="token comment">/* istanbul ignore if */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isIE <span class="token operator">&amp;&amp;</span>
        currentParent<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;textarea&#39;</span> <span class="token operator">&amp;&amp;</span>
        currentParent<span class="token punctuation">.</span>attrsMap<span class="token punctuation">.</span>placeholder <span class="token operator">===</span> text
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">var</span> children <span class="token operator">=</span> currentParent<span class="token punctuation">.</span>children<span class="token punctuation">;</span>

      <span class="token comment">// \u4E3B\u8981\u662F\u5BF9 text \u4E3A\u7A7A\u7684\u5904\u7406\u903B\u8F91</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>inPre <span class="token operator">||</span> text<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5F53 text \u975E\u7A7A\u65F6\u8FD4\u56DE text</span>
        <span class="token comment">// function isTextTag (el) { return el.tag === &#39;script&#39; || el.tag === &#39;style&#39;}</span>
        text <span class="token operator">=</span> <span class="token function">isTextTag</span><span class="token punctuation">(</span>currentParent<span class="token punctuation">)</span> <span class="token operator">?</span> text <span class="token operator">:</span> <span class="token function">decodeHTMLCached</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5982\u679C text \u662F\u7A7A\u683C\uFF0C\u4E14\u5143\u7D20\u6CA1\u6709\u5B50\u8282\u70B9,\u5219\u5220\u9664\u5F00\u59CB\u6807\u8BB0\u4E4B\u540E\u4EC5\u9650\u7A7A\u767D\u7684\u8282\u70B9</span>
        <span class="token comment">// remove the whitespace-only node right after an opening tag  </span>
        text <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>whitespaceOption<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u7A7A\u767D\u5904\u7406\u7B56\u7565 whitespace?: &#39;preserve&#39; | &#39;condense&#39;; \u4FDD\u7559\u8FD8\u662F\u6D53\u7F29</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>whitespaceOption <span class="token operator">===</span> <span class="token string">&#39;condense&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// in condense mode, remove the whitespace node if it contains</span>
          <span class="token comment">// line break, otherwise condense to a single space</span>
          text <span class="token operator">=</span> lineBreakRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// preserve \u4FDD\u7559\u7A7A\u683C</span>
          text <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        text <span class="token operator">=</span> preserveWhitespace <span class="token operator">?</span> <span class="token string">&#39; &#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// text \u6709\u503C\u5904\u7406</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inPre <span class="token operator">&amp;&amp;</span> whitespaceOption <span class="token operator">===</span> <span class="token string">&#39;condense&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
          <span class="token comment">// condense consecutive whitespaces into single space</span>
          text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>whitespaceRE$1<span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5C06\u591A\u4E2A\u7A7A\u683C\u538B\u7F29\u6210\u5355\u4E2A\u7A7A\u683C</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> res<span class="token punctuation">;</span>
        <span class="token keyword">var</span> child<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inVPre <span class="token operator">&amp;&amp;</span> text <span class="token operator">!==</span> <span class="token string">&#39; &#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>res <span class="token operator">=</span> <span class="token function">parseText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> delimiters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// \u5982\u679C\u975Ev-pre\u5185\u5BB9\uFF0C\u4E14 text \u4E0D\u4E3A\u7A7A\uFF0C\u4E14\u5B58\u5728\u63D2\u69FD\u52A8\u6001\u7ED1\u5B9A\u5185\u5BB9</span>
          child <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
            <span class="token literal-property property">expression</span><span class="token operator">:</span> res<span class="token punctuation">.</span>expression<span class="token punctuation">,</span> <span class="token comment">// _f(&quot;capitalize&quot;)(&quot;message&quot;)</span>
            <span class="token literal-property property">tokens</span><span class="token operator">:</span> res<span class="token punctuation">.</span>tokens<span class="token punctuation">,</span> <span class="token comment">// [{@binding: _f(&quot;capitalize&quot;)(&quot;message&quot;)}]</span>
            <span class="token literal-property property">text</span><span class="token operator">:</span> text
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">!==</span> <span class="token string">&#39; &#39;</span> <span class="token operator">||</span> <span class="token operator">!</span>children<span class="token punctuation">.</span>length <span class="token operator">||</span> children<span class="token punctuation">[</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// test \u4E0D\u4E3A\u7A7A\uFF0C\u6216\u8005 \u4E0D\u5B58\u5728 children\u65F6\uFF0C\u6216\u8005\u6709\u5B50\u5143\u7D20\u4E14\u6700\u540E\u4E00\u4E2A\u5B50\u5143\u7D20\u662F\u6587\u672C\u5143\u7D20\u4E14\u6587\u672C\u4E0D\u4E3A\u7A7A</span>
          child <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
            <span class="token literal-property property">text</span><span class="token operator">:</span> text
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>outputSourceRange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            child<span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>
            child<span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// \u4F5C\u4E3A\u5B50\u5143\u7D20\u63D2\u5165</span>
          children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5176\u4E2D\u5173\u952E\u7684\u662F parseText \u51FD\u6570</p><div class="language-js"><pre><code><span class="token keyword">var</span> defaultTagRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\{\\{((?:.|\\r?\\n)+?)\\}\\}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> regexEscapeRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-.*+?^\${}()|[\\]\\/\\\\]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>

<span class="token keyword">var</span> buildRegex <span class="token operator">=</span> <span class="token function">cached</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">delimiters</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> open <span class="token operator">=</span> delimiters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regexEscapeRE<span class="token punctuation">,</span> <span class="token string">&#39;\\\\$&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> close <span class="token operator">=</span> delimiters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regexEscapeRE<span class="token punctuation">,</span> <span class="token string">&#39;\\\\$&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>open <span class="token operator">+</span> <span class="token string">&#39;((?:.|\\\\n)+?)&#39;</span> <span class="token operator">+</span> close<span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * \u4F8B\u5B50\uFF1A
 * text: &quot;{{ message | capitalize }}&quot;
 */</span>
<span class="token keyword">function</span> <span class="token function">parseText</span> <span class="token punctuation">(</span>
  text<span class="token punctuation">,</span>
  delimiters <span class="token comment">// \u53EF\u4EE5\u81EA\u5B9A\u4E49\u63D2\u69FD\u7684\u7B26\u53F7\uFF0C\u9ED8\u8BA4\u662F {{ \u548C }}</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u56E0\u4E3A\u53EF\u4EE5\u81EA\u5B9A\u4E49\u63D2\u69FD\u7B26\u53F7\uFF0C\u6240\u4EE5\u9700\u8981\u6839\u636E delimiters \u52A8\u6001\u521B\u5EFA\u5339\u914D\u6B63\u5219</span>
  <span class="token keyword">var</span> tagRE <span class="token operator">=</span> delimiters <span class="token operator">?</span> <span class="token function">buildRegex</span><span class="token punctuation">(</span>delimiters<span class="token punctuation">)</span> <span class="token operator">:</span> defaultTagRE<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tagRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u7EAF\u6587\u672C\u8FD4\u56DE undefined</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> rawTokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> lastIndex <span class="token operator">=</span> tagRE<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> match<span class="token punctuation">,</span> index<span class="token punctuation">,</span> tokenValue<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>match <span class="token operator">=</span> tagRE<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    index <span class="token operator">=</span> match<span class="token punctuation">.</span>index<span class="token punctuation">;</span>
    <span class="token comment">// push text token</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      rawTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tokenValue <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tokenValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// tag token</span>
    <span class="token keyword">var</span> exp <span class="token operator">=</span> <span class="token function">parseFilters</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// _f(&quot;capitalize&quot;)(&quot;message&quot;)</span>
    tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;_s(&quot;</span> <span class="token operator">+</span> exp <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// _s =&gt; toString</span>
    rawTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;@binding&#39;</span><span class="token operator">:</span> exp <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {@binding: _f(&quot;capitalize&quot;)(&quot;message&quot;)}</span>
    lastIndex <span class="token operator">=</span> index <span class="token operator">+</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastIndex <span class="token operator">&lt;</span> text<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rawTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tokenValue <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tokenValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">expression</span><span class="token operator">:</span> tokens<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">tokens</span><span class="token operator">:</span> rawTokens
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u6B64\u65F6\u51FA\u73B0\u8FC7\u6EE4\u5668\u89E3\u6790\u7684\u51FD\u6570 parseFilters</p><div class="language-js"><pre><code><span class="token keyword">var</span> validDivisionCharRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\w).+\\-_$\\]]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * parseFilters \u5BF9 exp \u8868\u8FBE\u5F0F\u9010\u4E2A\u5B57\u7B26\u89E3\u6790\uFF0C\u5904\u7406\u591A\u79CD\u8FB9\u754C\u60C5\u51B5\uFF0C\u6700\u7EC8\u7ED3\u679C\u662F
 * &quot;message | capitalize&quot; =&gt; _f(&quot;capitalize&quot;)(&quot;message&quot;)
 * &quot;message | capitalize(&#39;arg1&#39;,&#39;arg2&#39;)&quot; =&gt; _f(&quot;capitalize&quot;)(&quot;message&quot;,&#39;arg1&#39;,&#39;arg2&#39;)
 * &quot;message | filterA | filterB&quot; =&gt; _f(&quot;filterB&quot;)(_f(&quot;filterA&quot;)(&quot;message&quot;))
 */</span>
<span class="token keyword">function</span> <span class="token function">parseFilters</span> <span class="token punctuation">(</span><span class="token parameter">exp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> inSingle <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> inDouble <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> inTemplateString <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> inRegex <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> curly <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> square <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> paren <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> lastFilterIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> c<span class="token punctuation">,</span> prev<span class="token punctuation">,</span> i<span class="token punctuation">,</span> expression<span class="token punctuation">,</span> filters<span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> exp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    prev <span class="token operator">=</span> c<span class="token punctuation">;</span>
    c <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inSingle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token number">0x27</span> <span class="token operator">&amp;&amp;</span> prev <span class="token operator">!==</span> <span class="token number">0x5C</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> inSingle <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>inDouble<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token number">0x22</span> <span class="token operator">&amp;&amp;</span> prev <span class="token operator">!==</span> <span class="token number">0x5C</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> inDouble <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>inTemplateString<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token number">0x60</span> <span class="token operator">&amp;&amp;</span> prev <span class="token operator">!==</span> <span class="token number">0x5C</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> inTemplateString <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>inRegex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token number">0x2f</span> <span class="token operator">&amp;&amp;</span> prev <span class="token operator">!==</span> <span class="token number">0x5C</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> inRegex <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
      c <span class="token operator">===</span> <span class="token number">0x7C</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// pipe</span>
      exp<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0x7C</span> <span class="token operator">&amp;&amp;</span>
      exp<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0x7C</span> <span class="token operator">&amp;&amp;</span>
      <span class="token operator">!</span>curly <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>square <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>paren
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>expression <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// first filter, end of expression</span>
        lastFilterIndex <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        expression <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">pushFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0x22</span><span class="token operator">:</span> inDouble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">break</span>         <span class="token comment">// &quot;</span>
        <span class="token keyword">case</span> <span class="token number">0x27</span><span class="token operator">:</span> inSingle <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">break</span>         <span class="token comment">// &#39;</span>
        <span class="token keyword">case</span> <span class="token number">0x60</span><span class="token operator">:</span> inTemplateString <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">break</span> <span class="token comment">// \`</span>
        <span class="token keyword">case</span> <span class="token number">0x28</span><span class="token operator">:</span> paren<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span>                 <span class="token comment">// (</span>
        <span class="token keyword">case</span> <span class="token number">0x29</span><span class="token operator">:</span> paren<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">break</span>                 <span class="token comment">// )</span>
        <span class="token keyword">case</span> <span class="token number">0x5B</span><span class="token operator">:</span> square<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span>                <span class="token comment">// [</span>
        <span class="token keyword">case</span> <span class="token number">0x5D</span><span class="token operator">:</span> square<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">break</span>                <span class="token comment">// ]</span>
        <span class="token keyword">case</span> <span class="token number">0x7B</span><span class="token operator">:</span> curly<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span>                 <span class="token comment">// {</span>
        <span class="token keyword">case</span> <span class="token number">0x7D</span><span class="token operator">:</span> curly<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">break</span>                 <span class="token comment">// }</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token number">0x2f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// /</span>
        <span class="token keyword">var</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// find first non-whitespace prev char</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          p <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!==</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">break</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">||</span> <span class="token operator">!</span>validDivisionCharRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          inRegex <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>expression <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    expression <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lastFilterIndex <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">pushFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">pushFilter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>filters <span class="token operator">||</span> <span class="token punctuation">(</span>filters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastFilterIndex<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lastFilterIndex <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>filters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> filters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      expression <span class="token operator">=</span> <span class="token function">wrapFilter</span><span class="token punctuation">(</span>expression<span class="token punctuation">,</span> filters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> expression
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">wrapFilter</span> <span class="token punctuation">(</span><span class="token parameter">exp<span class="token punctuation">,</span> filter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// exp: message filter: capitalize</span>
  <span class="token keyword">var</span> i <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u8BF4\u660E\u8FC7\u6EE4\u5668\u6CA1\u6709\u5E26\u53C2\u6570</span>
    <span class="token comment">// _f: resolveFilter</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;_f(\\&quot;&quot;</span> <span class="token operator">+</span> filter <span class="token operator">+</span> <span class="token string">&quot;\\&quot;)(&quot;</span> <span class="token operator">+</span> exp <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// _f(&quot;capitalize&quot;)(&quot;message&quot;)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u8FC7\u6EE4\u5668\u6709\u5E26\u53C2\u6570 capitalize(&#39;arg1&#39;,&#39;arg2&#39;)&quot;</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// capitalize</span>
    <span class="token keyword">var</span> args <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;arg1&#39;,&#39;arg2&#39;) \u6CE8\u610F\u8FD9\u91CC\u7ED3\u5C3E\u6709 )\uFF0C\u6240\u4EE5\u4E0B\u9762\u62FC\u63A5\u65F6\u6700\u540E\u7684\u4E0D\u6DFB\u52A0 \uFF09</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;_f(\\&quot;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;\\&quot;)(&quot;</span> <span class="token operator">+</span> exp <span class="token operator">+</span> <span class="token punctuation">(</span>args <span class="token operator">!==</span> <span class="token string">&#39;)&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> args <span class="token operator">:</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u8FC7\u6EE4\u5668\u5E94\u7528\u5728-v-bind-\u4E2D" tabindex="-1">\u8FC7\u6EE4\u5668\u5E94\u7528\u5728 v-bind \u4E2D <a class="header-anchor" href="#\u8FC7\u6EE4\u5668\u5E94\u7528\u5728-v-bind-\u4E2D" aria-hidden="true">#</a></h2><p>v-bind \u7528\u4E8E\u5728\u5F00\u59CB\u6807\u7B7E\u4E2D\u7ED1\u5B9A\u52A8\u6001\u5C5E\u6027\uFF0C\u6240\u4EE5\u51FD\u6570\u8DEF\u5F84\u8DDF\u4E0A\u4E00\u8282\u8BB2\u89E3\u6307\u4EE4\u57FA\u672C\u4E00\u6837\uFF1A <code>$mount =&gt; compileToFunctions =&gt; createCompiler =&gt; baseCompile =&gt; parse =&gt; parseHTML =&gt; parseStartTag =&gt; handlerStartTag =&gt; options.start =&gt; closeElement =&gt; processElement =&gt; processAttrs =&gt; processFilters</code></p><p>\u5177\u4F53 processFilters \u89E3\u6790\u540C\u4E0A\u9762\u3002</p><div class="language-js"><pre><code><span class="token comment">// var onRE = /^@|^v-on:/;</span>
<span class="token comment">// var dirRE = /^v-|^@|^:|^#/;</span>
<span class="token comment">// var argRE = /:(.*)$/;</span>
<span class="token comment">// var bindRE = /^:|^\\.|^v-bind:/;</span>
<span class="token comment">// var modifierRE = /\\.[^.\\]]+(?=[^\\]]*$)/g;</span>
<span class="token comment">// var dynamicArgRE = /^\\[.*\\]$/;</span>
<span class="token comment">// \u8FD9\u4E2A\u51FD\u6570\u5904\u7406\u4E86\u4FEE\u9970\u7B26\u3001\u4E8B\u4EF6\u8FC7\u6EE4\u5668\u3001\u4E8B\u4EF6\u7ED1\u5B9A</span>
<span class="token keyword">function</span> <span class="token function">processAttrs</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// attrsList: [ {name: &#39;v-bind:atrr&#39;, value: &#39;value | filterV&#39;,start,end}]</span>
  <span class="token keyword">var</span> list <span class="token operator">=</span> el<span class="token punctuation">.</span>attrsList<span class="token punctuation">;</span>
  <span class="token keyword">var</span> i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> name<span class="token punctuation">,</span> rawName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> syncGen<span class="token punctuation">,</span> isDynamic<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    name <span class="token operator">=</span> rawName <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    value <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dirRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// dirRE = /^v-|^@|^:|^#/; \u5373\u5339\u914D v-on / @ / v-bind / : / v-slot / #</span>
      <span class="token comment">// mark element as dynamic</span>
      el<span class="token punctuation">.</span>hasBindings <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token comment">// modifiers \u89E3\u6790\u52A8\u6001\u5C5E\u6027\u4FEE\u9970\u7B26\uFF0C\u6BD4\u5982 @click.stop, v-bind:show.sync</span>
      <span class="token comment">// modifiers = {sync: true, stop: true}</span>
      modifiers <span class="token operator">=</span> <span class="token function">parseModifiers</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>dirRE<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// support .foo shorthand syntax for the .prop modifier</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>modifierRE<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>bindRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// v-bind:attr or :attr</span>
        name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>bindRE<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name = attr</span>
        <span class="token comment">// \u89E3\u6790\u8FC7\u6EE4\u5668</span>
        value <span class="token operator">=</span> <span class="token function">parseFilters</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// value = &#39;_f(&quot;filterV&quot;)(&quot;value&quot;)&#39; \u5173\u4E8E parseFilter \u5177\u4F53\u89C1\u4E0A\u9762\u5206\u6790</span>
        isDynamic <span class="token operator">=</span> dynamicArgRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6BD4\u5982\uFF1A v-bind:[eventName]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isDynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// v-bind:[attr]\uFF0C\u5219\u53BB\u6389\u524D\u540E\u7684 [ ]</span>
          name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">warn$2</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span><span class="token string">&quot;The value for a v-bind expression cannot be empty. Found in \\&quot;v-bind:&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u8FC7\u6EE4\u5668\u7684\u6267\u884C" tabindex="-1">\u8FC7\u6EE4\u5668\u7684\u6267\u884C <a class="header-anchor" href="#\u8FC7\u6EE4\u5668\u7684\u6267\u884C" aria-hidden="true">#</a></h2><p>\u901A\u8FC7\u4E0A\u9762\u53EF\u4EE5\u77E5\u9053\uFF0C\u4E00\u4E2A\u8FC7\u6EE4\u5668\u8868\u8FBE\u5F0F\u6700\u7EC8\u4F1A\u88AB parseFilter \u89E3\u6790\u6210\u5E26 _f \u51FD\u6570\u7684\u4EE3\u7801\u5B57\u7B26\u4E32</p><div class="language-js"><pre><code><span class="token string">&quot;message | capitalize&quot;</span> <span class="token operator">=&gt;</span> <span class="token function">_f</span><span class="token punctuation">(</span><span class="token string">&quot;capitalize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span>
<span class="token string">&quot;message | capitalize(&#39;arg1&#39;,&#39;arg2&#39;)&quot;</span> <span class="token operator">=&gt;</span> <span class="token function">_f</span><span class="token punctuation">(</span><span class="token string">&quot;capitalize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;arg1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;arg2&#39;</span><span class="token punctuation">)</span>
<span class="token string">&quot;message | filterA | filterB&quot;</span> <span class="token operator">=&gt;</span> <span class="token function">_f</span><span class="token punctuation">(</span><span class="token string">&quot;filterB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">_f</span><span class="token punctuation">(</span><span class="token string">&quot;filterA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>\u8FD9\u4E9B\u4EE3\u7801\u5B57\u7B26\u4E32\uFF0C\u6700\u7EC8\u5728 generate \u51FD\u6570\u4E2D\u5305\u88F9\u5728 with \u51FD\u6570\u4E2D\u8FD4\u56DE\uFF0C\u7531 createFunction \u51FD\u6570\u751F\u6210 render \u7ED3\u679C\u8D4B\u503C\u7ED9 vm.$options.render</p><div class="language-js"><pre><code><span class="token comment">// generate</span>
<span class="token keyword">function</span> <span class="token function">generate</span> <span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">&quot;with(this){return &quot;</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">staticRenderFns</span><span class="token operator">:</span> state<span class="token punctuation">.</span>staticRenderFns
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> createCompiler <span class="token operator">=</span> <span class="token function">createCompilerCreator</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">baseCompile</span> <span class="token punctuation">(</span>
  <span class="token parameter">template<span class="token punctuation">,</span>
  options</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>optimize <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">optimize</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> code <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ast</span><span class="token operator">:</span> ast<span class="token punctuation">,</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> code<span class="token punctuation">.</span>render<span class="token punctuation">,</span>
    <span class="token literal-property property">staticRenderFns</span><span class="token operator">:</span> code<span class="token punctuation">.</span>staticRenderFns
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">createCompilerCreator</span> <span class="token punctuation">(</span><span class="token parameter">baseCompile</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">createCompiler</span> <span class="token punctuation">(</span><span class="token parameter">baseOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">compile</span> <span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u7701\u7565\u4EE3\u7801...</span>
      <span class="token keyword">return</span> compiled
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">compile</span><span class="token operator">:</span> compile<span class="token punctuation">,</span>
      <span class="token literal-property property">compileToFunctions</span><span class="token operator">:</span> <span class="token function">createCompileToFunctionFn</span><span class="token punctuation">(</span>compile<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createCompileToFunctionFn</span> <span class="token punctuation">(</span><span class="token parameter">compile</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> cache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">compileToFunctions</span> <span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> options<span class="token punctuation">,</span> vm</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    options <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>

    <span class="token comment">// compile</span>
    <span class="token keyword">var</span> compiled <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>
    res<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token function">createFunction</span><span class="token punctuation">(</span>compiled<span class="token punctuation">.</span>render<span class="token punctuation">,</span> fnGenErrors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span>staticRenderFns <span class="token operator">=</span> compiled<span class="token punctuation">.</span>staticRenderFns<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">createFunction</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> fnGenErrors<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// vm.render</span>
<span class="token keyword">function</span> <span class="token function">createFunction</span> <span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> errors</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6B64\u51FD\u6570\u8C03\u7528\uFF0C\u5373\u6267\u884C with \u8BED\u53E5\uFF1A&quot;with(this){return &quot; + code + &quot;}&quot;\uFF0C\u8FD4\u56DE code\u3002 \u800Ccode\u4E2D\u7684 _c / _f / _s \u7B49\u7B49\u51FD\u6570\u4F1A\u5728 vm._render \u51FD\u6570\u4E2D\u8C03\u7528</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> 
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    errors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">err</span><span class="token operator">:</span> err<span class="token punctuation">,</span> <span class="token literal-property property">code</span><span class="token operator">:</span> code <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> noop
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>code \u4EE3\u7801\u5B57\u7B26\u4E32\u7684\u4E0B\u5212\u7EBF\u7B80\u5199\u51FD\u6570\u662F\u5728 Vue \u6784\u9020\u51FD\u6570\u521D\u59CB\u5316\u65F6\uFF0CrenderMinixs(Vue) \u4E2D\u8C03\u7528 installRenderHelpers(Vue.prototype) \u4F20\u5165\u7684\u3002</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">renderMixin</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// install runtime convenience helpers</span>
  <span class="token comment">// \u5728\u539F\u578B\u4E0A\u5B89\u88C5 _c / _f / _s \u7B49\u7B49\u5DE5\u5177\u51FD\u6570</span>
  <span class="token function">installRenderHelpers</span><span class="token punctuation">(</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$nextTick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">nextTick</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_render</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      currentRenderingInstance <span class="token operator">=</span> vm<span class="token punctuation">;</span>
      vnode <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_renderProxy<span class="token punctuation">,</span> vm<span class="token punctuation">.</span>$createElement<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// vm._renderProxy = vm\uFF0C\u6B64\u65F6\u5373\u6267\u884C\u4EE3\u7801\u5B57\u7B26\u4E32 code \u4E2D\u7684\u51FD\u6570\u3002</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">installRenderHelpers</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  target<span class="token punctuation">.</span>_o <span class="token operator">=</span> markOnce<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_n <span class="token operator">=</span> toNumber<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_s <span class="token operator">=</span> toString<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_l <span class="token operator">=</span> renderList<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_t <span class="token operator">=</span> renderSlot<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_q <span class="token operator">=</span> looseEqual<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_i <span class="token operator">=</span> looseIndexOf<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_m <span class="token operator">=</span> renderStatic<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_f <span class="token operator">=</span> resolveFilter<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_k <span class="token operator">=</span> checkKeyCodes<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_b <span class="token operator">=</span> bindObjectProps<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_v <span class="token operator">=</span> createTextVNode<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_e <span class="token operator">=</span> createEmptyVNode<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_u <span class="token operator">=</span> resolveScopedSlots<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_g <span class="token operator">=</span> bindObjectListeners<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_d <span class="token operator">=</span> bindDynamicKeys<span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>_p <span class="token operator">=</span> prependModifier<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u8FD9\u91CC\u6211\u4EEC\u770B\u4E0B\u8FC7\u6EE4\u5668\u76F8\u5173\u7684 <code>target._f = resolveFilter</code> \u51FD\u6570</p><div class="language-js"><pre><code><span class="token comment">// _f(&quot;capitalize&quot;)(&quot;message&quot;) \u8FC7\u6EE4\u5668\u6267\u884C id = &quot;capitalize&quot;</span>
<span class="token comment">// _f \u51FD\u6570\u662F\u5728 Vue \u6784\u9020\u51FD\u6570\u521D\u59CB\u5316\u65F6 renderMinixs(Vue) \u4E2D\u8C03\u7528 installRenderHelpers(Vue.prototype) \u4F20\u5165\u7684\u3002</span>
<span class="token comment">// \u4F1A\u5728 vm._render \u51FD\u6570\u4E2D\u8C03\u7528 render.call(vm._renderProxy, vm.$createElement);</span>
<span class="token keyword">function</span> <span class="token function">resolveFilter</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">resolveAsset</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">,</span> <span class="token string">&#39;filters&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">||</span> identity
<span class="token punctuation">}</span>

<span class="token comment">/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 * 
 * \u4ECE vm.$options \u4E2D\u63D0\u51FA\u5BF9\u5E94\u7684\u8D44\u6E90
 * resolveAsset(this.$options, &#39;filters&#39;, id, true) || identity
 * Ctor = resolveAsset(context.$options, &#39;components&#39;, tag)
 * resolveAsset(vm.$options, &#39;directives&#39;, dir.name, true);
 */</span>
<span class="token keyword">function</span> <span class="token function">resolveAsset</span> <span class="token punctuation">(</span>
  options<span class="token punctuation">,</span> <span class="token comment">// vm.$options \u5728 _init \u51FD\u6570 mergeOptions \u65F6\u5408\u5E76\u4E86\u9009\u9879</span>
  type<span class="token punctuation">,</span> <span class="token comment">// type = filters / components / directives</span>
  id<span class="token punctuation">,</span> <span class="token comment">// key</span>
  warnMissing
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* istanbul ignore if */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> id <span class="token operator">!==</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> assets <span class="token operator">=</span> options<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// vm.$options[filters] \u53D6\u51FA\u58F0\u660E\u7684\u6240\u6709\u8FC7\u6EE4\u5668</span>
  <span class="token comment">// check local registration variations first</span>
  <span class="token comment">// \u5728 options.filters \u4E2D\u68C0\u67E5\u662F\u5426\u6709 type \u7684\u8FC7\u6EE4\u5668\uFF0C\u6709\u5219\u8FD4\u56DE</span>
  <span class="token comment">// \u5982\u679C\u6CA1\u6709\uFF0C\u5C06 type \u53D8\u6210\u5C0F\u9A7C\u5CF0\u5F62\u5F0F\u518D\u8BD5\uFF0C\u6709\u5219\u8FD4\u56DE</span>
  <span class="token comment">// \u5982\u679C\u8FD8\u6CA1\u6709\uFF0C\u5C06 type \u53D8\u6210\u5927\u9A7C\u5CF0\u5F62\u5F0F\u518D\u8BD5\uFF0C\u6709\u5219\u8FD4\u56DE</span>
  <span class="token comment">// \u5982\u679C\u4ECD\u6CA1\u6709\uFF0C\u6253\u5370\u8B66\u544A</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>assets<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> assets<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token punctuation">}</span>
  <span class="token keyword">var</span> camelizedId <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>assets<span class="token punctuation">,</span> camelizedId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> assets<span class="token punctuation">[</span>camelizedId<span class="token punctuation">]</span> <span class="token punctuation">}</span>
  <span class="token keyword">var</span> PascalCaseId <span class="token operator">=</span> <span class="token function">capitalize</span><span class="token punctuation">(</span>camelizedId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>assets<span class="token punctuation">,</span> PascalCaseId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> assets<span class="token punctuation">[</span>PascalCaseId<span class="token punctuation">]</span> <span class="token punctuation">}</span>
  <span class="token comment">// fallback to prototype chain</span>
  <span class="token keyword">var</span> res <span class="token operator">=</span> assets<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">||</span> assets<span class="token punctuation">[</span>camelizedId<span class="token punctuation">]</span> <span class="token operator">||</span> assets<span class="token punctuation">[</span>PascalCaseId<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>warnMissing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warn</span><span class="token punctuation">(</span>
      <span class="token string">&#39;Failed to resolve &#39;</span> <span class="token operator">+</span> type<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;: &#39;</span> <span class="token operator">+</span> id<span class="token punctuation">,</span>
      options
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div>`,26);function m(f,g,y,w,v,x){return e(),t("div",null,[u,n("p",null,[l,n("code",null,o(),1),k,i,r]),d])}var q=p(c,[["render",m]]);export{b as __pageData,q as default};
