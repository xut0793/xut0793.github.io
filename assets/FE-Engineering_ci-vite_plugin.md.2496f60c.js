import{_ as n,c as s,o as a,a as p}from"./app.9dbb06c5.js";const g='{"title":"plugin \u63D2\u4EF6\u4F53\u7CFB","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u63D2\u4EF6\u641C\u7D22","slug":"\u63D2\u4EF6\u641C\u7D22"},{"level":2,"title":"\u63D2\u4EF6\u7684\u4F7F\u7528","slug":"\u63D2\u4EF6\u7684\u4F7F\u7528"},{"level":2,"title":"\u63D2\u4EF6\u94A9\u5B50","slug":"\u63D2\u4EF6\u94A9\u5B50"},{"level":2,"title":"\u63D2\u4EF6\u6E90\u7801\u6D41\u7A0B","slug":"\u63D2\u4EF6\u6E90\u7801\u6D41\u7A0B"},{"level":3,"title":"resolveConfig\uFF1A\u63D2\u4EF6\u89E3\u6790\uFF0C\u5206\u7C7B\uFF0C\u6267\u884C\u5404\u4E2A\u63D2\u4EF6\u7684 config \u94A9\u5B50","slug":"resolveconfig\uFF1A\u63D2\u4EF6\u89E3\u6790\uFF0C\u5206\u7C7B\uFF0C\u6267\u884C\u5404\u4E2A\u63D2\u4EF6\u7684-config-\u94A9\u5B50"},{"level":3,"title":"resolvePlugins\uFF1A\u52A0\u5165Vite\u5185\u7F6E\u7684\u63D2\u4EF6","slug":"resolveplugins\uFF1A\u52A0\u5165vite\u5185\u7F6E\u7684\u63D2\u4EF6"},{"level":3,"title":"createPluginContainer\uFF1A\u521B\u5EFA\u63D2\u4EF6\u7EDF\u4E00\u7BA1\u7406\u5668\uFF0C\u5E76\u6267\u884C\u63D2\u4EF6\u7684 configureServer \u94A9\u5B50","slug":"createplugincontainer\uFF1A\u521B\u5EFA\u63D2\u4EF6\u7EDF\u4E00\u7BA1\u7406\u5668\uFF0C\u5E76\u6267\u884C\u63D2\u4EF6\u7684-configureserver-\u94A9\u5B50"},{"level":3,"title":"\u5728\u542F\u52A8\u670D\u52A1\u65F6\uFF0C\u6267\u884C\u6240\u6709\u63D2\u4EF6\u7684 buildStart \u94A9\u5B50\u3002","slug":"\u5728\u542F\u52A8\u670D\u52A1\u65F6\uFF0C\u6267\u884C\u6240\u6709\u63D2\u4EF6\u7684-buildstart-\u94A9\u5B50\u3002"},{"level":3,"title":"\u63D2\u4EF6\u7EDF\u4E00\u7BA1\u7406\u5668","slug":"\u63D2\u4EF6\u7EDF\u4E00\u7BA1\u7406\u5668"}],"relativePath":"FE-Engineering/ci-vite/plugin.md"}',t={},o=p(`<h1 id="plugin-\u63D2\u4EF6\u4F53\u7CFB" tabindex="-1">plugin \u63D2\u4EF6\u4F53\u7CFB <a class="header-anchor" href="#plugin-\u63D2\u4EF6\u4F53\u7CFB" aria-hidden="true">#</a></h1><p>Vite \u63D2\u4EF6\u6269\u5C55\u4E8E\u8BBE\u8BA1\u51FA\u8272\u7684 Rollup \u63D2\u4EF6\u4F53\u7CFB\uFF0C\u5E76\u6DFB\u52A0\u4E86\u4E00\u4E9B Vite \u72EC\u6709\u7684\u94A9\u5B50\u9009\u9879\u3002\u6240\u4EE5 Rollup \u63D2\u4EF6\u53EF\u4EE5\u76F4\u63A5\u5E94\u7528\u4E8E vite \u7684\u751F\u4EA7\u6784\u5EFA\u4E2D\u3002</p><h2 id="\u63D2\u4EF6\u641C\u7D22" tabindex="-1">\u63D2\u4EF6\u641C\u7D22 <a class="header-anchor" href="#\u63D2\u4EF6\u641C\u7D22" aria-hidden="true">#</a></h2><p>\u4F60\u53EF\u4EE5\u5728\u8FD9\u4E9B\u5730\u65B9\u641C\u7D22\u5408\u9002\u7684\u63D2\u4EF6\uFF1A</p><ul><li><a href="https://vite-rollup-plugins.patak.dev/" target="_blank" rel="noopener noreferrer">Vite Rollup Plugins</a></li><li><a href="https://github.com/vitejs/awesome-vite#plugins" target="_blank" rel="noopener noreferrer">awesome-vite#plugins</a></li><li><a href="https://www.npmjs.com/search?q=vite-plugin&amp;ranking=popularity" target="_blank" rel="noopener noreferrer">npm vite \u63D2\u4EF6\u641C\u7D22\u94FE\u63A5</a></li></ul><h2 id="\u63D2\u4EF6\u7684\u4F7F\u7528" tabindex="-1">\u63D2\u4EF6\u7684\u4F7F\u7528 <a class="header-anchor" href="#\u63D2\u4EF6\u7684\u4F7F\u7528" aria-hidden="true">#</a></h2><p>\u4F7F\u7528 vite \u63D2\u4EF6\u4E24\u6B65\uFF1A</p><ol><li>\u4E0B\u8F7D\u5B89\u88C5\u63D2\u4EF6</li></ol><div class="language-"><pre><code>npm i -D @vitejs/plugin-legacy
</code></pre></div><ol start="2"><li>\u6CE8\u518C\u63D2\u4EF6\uFF0C\u6DFB\u52A0\u5230 <code>vite.config.js</code> \u914D\u7F6E\u9879 <code>plugins</code> \u4E2D</li></ol><div class="language-js"><pre><code><span class="token keyword">import</span> legacy <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-legacy&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">legacy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;defaults&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;not IE 11&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>\u4E3A\u4E86\u4E0E\u67D0\u4E9B Rollup \u63D2\u4EF6\u517C\u5BB9\uFF0C\u53EF\u80FD\u9700\u8981\u5F3A\u5236\u6267\u884C\u63D2\u4EF6\u7684\u987A\u5E8F\uFF0C\u53EF\u4EE5\u4F7F\u7528 <code>enforce</code> \u5B57\u6BB5\u6765\u5F3A\u5236\u63D2\u4EF6\u7684\u8C03\u7528\u4F4D\u7F6E\u3002</p><div class="language-js"><pre><code><span class="token comment">// pre\uFF1A\u5728 Vite \u6838\u5FC3\u63D2\u4EF6\u4E4B\u524D\u8C03\u7528\u8BE5\u63D2\u4EF6</span>
<span class="token comment">// \u9ED8\u8BA4\uFF1A\u5728 Vite \u6838\u5FC3\u63D2\u4EF6\u4E4B\u540E\u8C03\u7528\u8BE5\u63D2\u4EF6</span>
<span class="token comment">// post\uFF1A\u5728 Vite \u6784\u5EFA\u63D2\u4EF6\u4E4B\u540E\u8C03\u7528\u8BE5\u63D2\u4EF6</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token operator">...</span><span class="token function">image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// vite \u6216 rollup \u63D2\u4EF6\u51FD\u6570\u6267\u884C\u5BFC\u51FA\u7684\u662F\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u6240\u4EE5\u8FD9\u91CC\u89E3\u6784</span>
      <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>\u63D2\u4EF6\u4E5F\u53EF\u4EE5\u89C6\u529F\u80FD\u9700\u8981\uFF0C\u6307\u5B9A\u63D2\u4EF6\u5E94\u7528\u8303\u56F4\u662F\u5728\u5F00\u53D1\u73AF\u5883\u8FD8\u662F\u751F\u4EA7\u73AF\u5883\u4F7F\u7528\uFF0C\u9ED8\u8BA4\u63D2\u4EF6\u5728\u5F00\u53D1\u548C\u751F\u4EA7\u6A21\u5F0F\u4E2D\u90FD\u4F1A\u8C03\u7528\uFF0C\u901A\u8FC7 <code>apply</code> \u5B57\u6BB5\u6307\u5B9A\u4F5C\u7528\u8303\u56F4\u3002</p><div class="language-js"><pre><code> <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token operator">...</span><span class="token function">typescript2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">apply</span><span class="token operator">:</span> <span class="token string">&#39;build&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
</code></pre></div><h2 id="\u63D2\u4EF6\u94A9\u5B50" tabindex="-1">\u63D2\u4EF6\u94A9\u5B50 <a class="header-anchor" href="#\u63D2\u4EF6\u94A9\u5B50" aria-hidden="true">#</a></h2><p>Vite/Rollup \u63D2\u4EF6\u5B9A\u4E49\u4E3A\u4E00\u4E2A\u5DE5\u5382\u51FD\u6570\uFF0C\u8BE5\u51FD\u6570\u53EF\u4EE5\u63A5\u53D7\u5141\u8BB8\u7528\u6237\u81EA\u5B9A\u4E49\u63D2\u4EF6\u884C\u4E3A\u7684\u9009\u9879\uFF0C\u7136\u540E\u8FD4\u56DE\u5B9E\u9645\u63D2\u4EF6\u5BF9\u8C61\u3002 Rollup \u63D2\u4EF6\u7684\u94A9\u5B50\u548Cvite\u63D2\u4EF6\u7279\u5B9A\u7684\u94A9\u5B50\u90FD\u4F5C\u4E3A\u8BE5\u63D2\u4EF6\u5BF9\u8C61\u7684\u65B9\u6CD5\u5B58\u5728\u3002</p><ul><li>\u5176\u4E2D Vite \u81EA\u5B9A\u4E49\u7684 hook 5\u4E2A: <code>config / configResolved / configureServer / transformIndexHtml / handleHotUpdate</code></li><li>\u517C\u5BB9 Rollup \u7684 Hook 7\u4E2A: <code>options / buildStart / resolvedId / load / transform / buildEnd / closeBundle</code> \u3002</li><li>Hook \u6267\u884C\u987A\u5E8F\uFF1A\u4ECE\u4E0A\u5230\u4E0B\u3002</li></ul><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">myPlugin</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;my-plugin&#39;</span><span class="token punctuation">,</span>
    enforce<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;post&#39;</span>
    apply<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;serve&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;build&#39;</span>
    <span class="token comment">// \u5728\u670D\u52A1\u5668\u542F\u52A8\u65F6\u88AB\u8C03\u7528</span>
    config<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">config</span><span class="token operator">:</span> UserConfig<span class="token punctuation">,</span> <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">command</span><span class="token operator">:</span> string <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> UserConfig <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token operator">|</span> Promise<span class="token operator">&lt;</span>UserConfig <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token operator">&gt;</span>
    configResolved<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">config</span><span class="token operator">:</span> ResolvedConfig</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token operator">|</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// \u62FF\u5230\u6700\u7EC8\u89E3\u6790\u540E\u7684 config</span>
    <span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    configureServer<span class="token operator">?</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">server</span><span class="token operator">:</span> ViteDevServer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token operator">|</span> Promise<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// \u5F00\u53D1\u670D\u52A1\u5668\u5BF9\u8C61,</span>
    <span class="token function">buildStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// \u5728\u6709\u4F20\u5165\u6A21\u5757\u8BF7\u6C42\u65F6\u88AB\u8C03\u7528</span>
    <span class="token function">transformIndexHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">resolvedId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// \u5728\u70ED\u66F4\u65B0\u65F6\u8C03\u7528</span>
    <span class="token function">handleHotUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// \u5728\u670D\u52A1\u5668\u5173\u95ED\u65F6\u88AB\u8C03\u7528</span>
    <span class="token function">buildEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">closeBundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u63D2\u4EF6\u6E90\u7801\u6D41\u7A0B" tabindex="-1">\u63D2\u4EF6\u6E90\u7801\u6D41\u7A0B <a class="header-anchor" href="#\u63D2\u4EF6\u6E90\u7801\u6D41\u7A0B" aria-hidden="true">#</a></h2><ul><li><code>resolveConfig</code>\uFF1A\u63D2\u4EF6\u89E3\u6790\uFF0C\u5206\u7C7B\uFF0C\u6267\u884C\u5404\u4E2A\u63D2\u4EF6\u7684 <code>config / configResolved</code> \u94A9\u5B50</li><li><code>resolvePlugins</code>\uFF1A\u52A0\u5165Vite\u5185\u7F6E\u7684\u63D2\u4EF6\uFF0C\u5982<code>vite:css</code> \u7B49</li><li><code>createPluginContainer</code>\uFF1A\u521B\u5EFA\u63D2\u4EF6\u7EDF\u4E00\u7BA1\u7406\u5668<code>container</code>\uFF0C\u5E76\u6267\u884C\u63D2\u4EF6\u7684 <code>configureServer</code> \u94A9\u5B50</li><li><code>server.listen</code>\uFF1A\u5F00\u542F\u670D\u52A1\u65F6\uFF0C\u901A\u8FC7 <code>container.buildStart({})</code> \u6267\u884C\u63D2\u4EF6\u7684<code>buildStart</code> \u94A9\u5B50</li></ul><h3 id="resolveconfig\uFF1A\u63D2\u4EF6\u89E3\u6790\uFF0C\u5206\u7C7B\uFF0C\u6267\u884C\u5404\u4E2A\u63D2\u4EF6\u7684-config-\u94A9\u5B50" tabindex="-1"><code>resolveConfig</code>\uFF1A\u63D2\u4EF6\u89E3\u6790\uFF0C\u5206\u7C7B\uFF0C\u6267\u884C\u5404\u4E2A\u63D2\u4EF6\u7684 config \u94A9\u5B50 <a class="header-anchor" href="#resolveconfig\uFF1A\u63D2\u4EF6\u89E3\u6790\uFF0C\u5206\u7C7B\uFF0C\u6267\u884C\u5404\u4E2A\u63D2\u4EF6\u7684-config-\u94A9\u5B50" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token comment">// vite/src/node/server.index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> resolveConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../config&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">inlineConfig</span><span class="token operator">:</span> InlineConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">:</span> romise<span class="token operator">&lt;</span>ViteDevServer<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u89E3\u6790 CLI \u4F20\u5165\u7684\u914D\u7F6E\u9879</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolveConfig</span><span class="token punctuation">(</span>inlineConfig<span class="token punctuation">,</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// vite/src/node/config.ts</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">resolveConfig</span><span class="token punctuation">(</span>inlineConfig<span class="token operator">:</span> InlineConfig<span class="token punctuation">,</span> <span class="token literal-property property">command</span><span class="token operator">:</span> <span class="token string">&#39;build&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">,</span>  defaultMode <span class="token operator">=</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>ResolvedConfig<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> config <span class="token operator">=</span> inlineConfig

  <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>

  <span class="token comment">//  \u5148\u6267\u884C flat()\uFF0C\u6240\u4EE5\u5B9A\u4E49\u63D2\u4EF6\u7684\u65F6\u5019\u8FD4\u56DE\u53EF\u4EE5\u6709\u5D4C\u5957[[pulginA,pulginB],pulginC]\uFF0C\u6240\u4EE5\u53EF\u4EE5\u81EA\u5B9A\u4E49\u4E00\u4E2A\u9884\u8BBE\u63D2\u4EF6\uFF0C\u8FD4\u56DE\u591A\u4E2A\u63D2\u4EF6\u6570\u7EC4</span>
	<span class="token comment">//  \u7136\u540E\u7B5B\u9009\u5E94\u7528 apply \u5BF9\u5E94\u573A\u666F(serve|build)\u7684\u63D2\u4EF6</span>
  <span class="token keyword">const</span> rawUserPlugins <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>plugins <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> p <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span>apply <span class="token operator">||</span> p<span class="token punctuation">.</span>apply <span class="token operator">===</span> command<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token comment">// \u6839\u636Eenforce\u5B57\u6BB5\u5BF9\u63D2\u4EF6\u8FDB\u884C\u6392\u5E8F\uFF0Cenforce\u53EF\u4EE5\u586Bpre\u3001 post</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>prePlugins<span class="token punctuation">,</span> normalPlugins<span class="token punctuation">,</span> postPlugins<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sortUserPlugins</span><span class="token punctuation">(</span>rawUserPlugins<span class="token punctuation">)</span>

  <span class="token comment">// \u6309 pre normal post \u987A\u5E8F\u6267\u884C\u63D2\u4EF6\u7684 config hook\uFF0C\u8FD9\u4E2A\u94A9\u5B50\u5185\u53EF\u4EE5\u518D\u6B21\u6DFB\u52A0\u81EA\u5B9A\u4E49\u914D\u7F6E</span>
  <span class="token keyword">const</span> userPlugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>prePlugins<span class="token punctuation">,</span> <span class="token operator">...</span>normalPlugins<span class="token punctuation">,</span> <span class="token operator">...</span>postPlugins<span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> p <span class="token keyword">of</span> userPlugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> p<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> configEnv<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        config <span class="token operator">=</span> <span class="token function">mergeConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u7EC4\u5408\u6700\u7EC8\u8981\u8FD4\u56DE\u914D\u7F6E\u5BF9\u8C61</span>
  <span class="token keyword">const</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> ResolvedConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>
    <span class="token operator">...</span>config<span class="token punctuation">,</span>
    command<span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> userPlugins<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token punctuation">;</span><span class="token punctuation">(</span>resolved<span class="token punctuation">.</span>plugins <span class="token keyword">as</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolvePlugins</span><span class="token punctuation">(</span>
    resolved<span class="token punctuation">,</span>
    prePlugins<span class="token punctuation">,</span>
    normalPlugins<span class="token punctuation">,</span>
    postPlugins
  <span class="token punctuation">)</span>

  <span class="token comment">// call configResolved hooks</span>
  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>userPlugins<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>configResolved<span class="token operator">?.</span><span class="token punctuation">(</span>resolved<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> resolved
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sortUserPlugins</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">(</span>Plugin <span class="token operator">|</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span></span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token literal-property property">prePlugins</span><span class="token operator">:</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> <span class="token literal-property property">postPlugins</span><span class="token operator">:</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> <span class="token literal-property property">normalPlugins</span><span class="token operator">:</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    plugins<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>enforce <span class="token operator">===</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">)</span> prePlugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>enforce <span class="token operator">===</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">)</span> postPlugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
      <span class="token keyword">else</span> normalPlugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>prePlugins<span class="token punctuation">,</span> normalPlugins<span class="token punctuation">,</span> postPlugins<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="resolveplugins\uFF1A\u52A0\u5165vite\u5185\u7F6E\u7684\u63D2\u4EF6" tabindex="-1"><code>resolvePlugins</code>\uFF1A\u52A0\u5165Vite\u5185\u7F6E\u7684\u63D2\u4EF6 <a class="header-anchor" href="#resolveplugins\uFF1A\u52A0\u5165vite\u5185\u7F6E\u7684\u63D2\u4EF6" aria-hidden="true">#</a></h3><p>\u5176\u4E2D\u5173\u952E\u4EE3\u7801 <code>resolvePlugins</code> \u51FD\u6570\uFF0C\u4E3B\u8981\u662F\u6DFB\u52A0\u4E00\u7CFB\u5217 vite \u5185\u7F6E\u7684\u5904\u7406\u63D2\u4EF6\uFF0C\u4E0E\u7528\u6237\u4F20\u5165\u7684\u63D2\u4EF6\u5408\u5E76\u3002</p><blockquote><p>\u6B64\u65F6\u6CE8\u610F\uFF0C\u6570\u7EC4\u5185\u63D2\u4EF6\u7684\u4F4D\u7F6E\u662F\u6709\u4E25\u683C\u8981\u6C42\u7684\u3002\u9760\u524D\u7684\u5148\u6267\u884C\u3002</p></blockquote><div class="language-js"><pre><code><span class="token comment">// vite/src/node/plguins/index.ts</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">resolvePlugins</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">config</span><span class="token operator">:</span> ResolvedConfig<span class="token punctuation">,</span>
  <span class="token literal-property property">prePlugins</span><span class="token operator">:</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">normalPlugins</span><span class="token operator">:</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">postPlugins</span><span class="token operator">:</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isBuild <span class="token operator">=</span> config<span class="token punctuation">.</span>command <span class="token operator">===</span> <span class="token string">&#39;build&#39;</span>

  <span class="token keyword">const</span> buildPlugins <span class="token operator">=</span> isBuild
    <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../build&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolveBuildPlugins</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">pre</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">post</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>
    isBuild <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">preAliasPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">aliasPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">entries</span><span class="token operator">:</span> config<span class="token punctuation">.</span>resolve<span class="token punctuation">.</span>alias <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>prePlugins<span class="token punctuation">,</span>
    config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>polyfillModulePreload
      <span class="token operator">?</span> <span class="token function">modulePreloadPolyfillPlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token function">resolvePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token operator">...</span>config<span class="token punctuation">.</span>resolve<span class="token punctuation">,</span>
      <span class="token literal-property property">root</span><span class="token operator">:</span> config<span class="token punctuation">.</span>root<span class="token punctuation">,</span>
      <span class="token literal-property property">isProduction</span><span class="token operator">:</span> config<span class="token punctuation">.</span>isProduction<span class="token punctuation">,</span>
      isBuild<span class="token punctuation">,</span>
      <span class="token literal-property property">ssrTarget</span><span class="token operator">:</span> config<span class="token punctuation">.</span>ssr<span class="token operator">?.</span>target<span class="token punctuation">,</span>
      <span class="token literal-property property">asSrc</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">htmlInlineScriptProxyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">cssPlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span>
    config<span class="token punctuation">.</span>esbuild <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token operator">?</span> <span class="token function">esbuildPlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>esbuild<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token function">jsonPlugin</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">namedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token operator">...</span>config<span class="token punctuation">.</span>json
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      isBuild
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">wasmPlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">webWorkerPlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">assetPlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>normalPlugins<span class="token punctuation">,</span>
    <span class="token function">definePlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">cssPostPlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>buildPlugins<span class="token punctuation">.</span>pre<span class="token punctuation">,</span>
    <span class="token operator">...</span>postPlugins<span class="token punctuation">,</span>
    <span class="token operator">...</span>buildPlugins<span class="token punctuation">.</span>post<span class="token punctuation">,</span>
    <span class="token comment">// internal server-only plugins are always applied after everything else</span>
    <span class="token operator">...</span><span class="token punctuation">(</span>isBuild
      <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">clientInjectionsPlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">importAnalysisPlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token keyword">as</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u56E0\u4E3A\u63D2\u4EF6\u89E3\u6790\u7ECF\u8FC7 <code>filter(Boolean)</code> \u7B5B\u9009\uFF0C\u6240\u4EE5\u63D2\u4EF6\u6570\u7EC4 <code>Plugins</code> \u4E2D <code>Falsy</code> \u865A\u503C\u4F4D\u7F6E\u7684\u63D2\u4EF6\u5C06\u88AB\u5FFD\u7565\uFF0C\u6240\u4EE5\u5728<code>vite.config.js</code>\u4E2D\u901A\u8FC7\u51FD\u6570\u8FD4\u56DE\u503C\u914D\u7F6E\u65F6\uFF0C\u53EF\u4F9D\u636E\u73AF\u5883\u8F7B\u677E\u5730\u5224\u65AD\uFF0C\u51B3\u5B9A\u662F\u542F\u7528\u6216\u505C\u7528\u63D2\u4EF6\u3002</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    command <span class="token operator">===</span> <span class="token string">&#39;serve&#39;</span> <span class="token operator">?</span> someServerPlugin <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="createplugincontainer\uFF1A\u521B\u5EFA\u63D2\u4EF6\u7EDF\u4E00\u7BA1\u7406\u5668\uFF0C\u5E76\u6267\u884C\u63D2\u4EF6\u7684-configureserver-\u94A9\u5B50" tabindex="-1"><code>createPluginContainer</code>\uFF1A\u521B\u5EFA\u63D2\u4EF6\u7EDF\u4E00\u7BA1\u7406\u5668\uFF0C\u5E76\u6267\u884C\u63D2\u4EF6\u7684 configureServer \u94A9\u5B50 <a class="header-anchor" href="#createplugincontainer\uFF1A\u521B\u5EFA\u63D2\u4EF6\u7EDF\u4E00\u7BA1\u7406\u5668\uFF0C\u5E76\u6267\u884C\u63D2\u4EF6\u7684-configureserver-\u94A9\u5B50" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token comment">// vite/src/node/server.index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> resolveConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../config&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">inlineConfig</span><span class="token operator">:</span> InlineConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">:</span> romise<span class="token operator">&lt;</span>ViteDevServer<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u89E3\u6790 CLI \u4F20\u5165\u7684\u914D\u7F6E\u9879</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolveConfig</span><span class="token punctuation">(</span>inlineConfig<span class="token punctuation">,</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> plugins <span class="token operator">=</span> config<span class="token punctuation">.</span>plugins
  <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createPluginContainer</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> watcher<span class="token punctuation">)</span>

  <span class="token comment">// apply server configuration hooks from plugins</span>
  <span class="token keyword">const</span> <span class="token literal-property property">postHooks</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>configureServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      postHooks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">configureServer</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u7701\u7565\u4E00\u5806\u4E2D\u95F4\u4EF6\u7684\u6CE8\u518C middleware.use(xxx)</span>

  <span class="token comment">// \u8FD9\u662F\u5728html\u4E2D\u95F4\u4EF6 indexHtmlMiddleware \u4E4B\u524D\u8FD0\u884C\u540E\u7F6E\u914D\u7F6E\u63D2\u4EF6\uFF0C\u4EE5\u4FBF\u7528\u6237\u4E2D\u95F4\u4EF6\u53EF\u4EE5\u63D0\u4F9B\u81EA\u5B9A\u4E49\u5185\u5BB9\u800C\u4E0D\u662Findex.html\u3002</span>
  postHooks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fn <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> server
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u5728\u542F\u52A8\u670D\u52A1\u65F6\uFF0C\u6267\u884C\u6240\u6709\u63D2\u4EF6\u7684-buildstart-\u94A9\u5B50\u3002" tabindex="-1">\u5728\u542F\u52A8\u670D\u52A1\u65F6\uFF0C\u6267\u884C\u6240\u6709\u63D2\u4EF6\u7684 <code>buildStart</code> \u94A9\u5B50\u3002 <a class="header-anchor" href="#\u5728\u542F\u52A8\u670D\u52A1\u65F6\uFF0C\u6267\u884C\u6240\u6709\u63D2\u4EF6\u7684-buildstart-\u94A9\u5B50\u3002" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>middlewareMode <span class="token operator">&amp;&amp;</span> httpServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> isOptimized <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">const</span> listen <span class="token operator">=</span> httpServer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">)</span>
    httpServer<span class="token punctuation">.</span>listen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">port</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isOptimized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token keyword">await</span> container<span class="token punctuation">.</span><span class="token function">buildStart</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// \u6267\u884C buildStart \u94A9\u5B50</span>
          <span class="token keyword">await</span> <span class="token function">runOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          isOptimized <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          httpServer<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> any
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> container<span class="token punctuation">.</span><span class="token function">buildStart</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// \u6267\u884C buildStart \u94A9\u5B50</span>
    <span class="token keyword">await</span> <span class="token function">runOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre></div><h3 id="\u63D2\u4EF6\u7EDF\u4E00\u7BA1\u7406\u5668" tabindex="-1">\u63D2\u4EF6\u7EDF\u4E00\u7BA1\u7406\u5668 <a class="header-anchor" href="#\u63D2\u4EF6\u7EDF\u4E00\u7BA1\u7406\u5668" aria-hidden="true">#</a></h3><p>\u5173\u952E\u4EE3\u7801\uFF1A<code>const container = await createPluginContainer(config, watcher)</code></p><div class="language-js"><pre><code><span class="token comment">// vite/src/node/server/pluginContainer.ts</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createPluginContainer</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token punctuation">{</span> plugins<span class="token punctuation">,</span> logger<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span> rollupOptions <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">:</span> ResolvedConfig<span class="token punctuation">,</span>
  watcher<span class="token operator">?</span><span class="token operator">:</span> FSWatcher</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>PluginContainer<span class="token operator">&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> <span class="token constant">MODULES</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> watchFiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// \u521B\u5EFA\u63D2\u4EF6\u94A9\u5B50\u6267\u884C\u7684\u4E0A\u4E0B\u6587\u5BF9\u8C61</span>
  <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token keyword">implements</span> <span class="token class-name">PluginContext</span> <span class="token punctuation">{</span>
    meta <span class="token operator">=</span> minimalContext<span class="token punctuation">.</span>meta
    ssr <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token literal-property property">_activePlugin</span><span class="token operator">:</span> Plugin <span class="token operator">|</span> <span class="token keyword">null</span>
    <span class="token literal-property property">_activeId</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token literal-property property">_activeCode</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    _resolveSkips<span class="token operator">?</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span>Plugin<span class="token operator">&gt;</span>
    <span class="token literal-property property">_addedImports</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">initialPlugin<span class="token operator">?</span><span class="token operator">:</span> Plugin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_activePlugin <span class="token operator">=</span> initialPlugin <span class="token operator">||</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>

    <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">code</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">opts</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">2020</span><span class="token punctuation">,</span>
        <span class="token literal-property property">locations</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token operator">...</span>opts
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">async</span> <span class="token function">resolve</span><span class="token punctuation">(</span>
      <span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
      importer<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
      options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> skipSelf<span class="token operator">?</span><span class="token operator">:</span> boolean <span class="token punctuation">}</span></span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> <span class="token literal-property property">skips</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span>Plugin<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token operator">?.</span>skipSelf <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_activePlugin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        skips <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_resolveSkips<span class="token punctuation">)</span>
        skips<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_activePlugin<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">let</span> out <span class="token operator">=</span> <span class="token keyword">await</span> container<span class="token punctuation">.</span><span class="token function">resolveId</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> importer<span class="token punctuation">,</span> skips<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ssr<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> out <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> out <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> out <span class="token punctuation">}</span>
      <span class="token keyword">return</span> out <span class="token keyword">as</span> ResolvedId <span class="token operator">|</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>

    <span class="token function">getModuleInfo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> mod <span class="token operator">=</span> <span class="token constant">MODULES</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>mod<span class="token punctuation">)</span> <span class="token keyword">return</span> mod<span class="token punctuation">.</span>info
      mod <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token comment">/** @type {import(&#39;rollup&#39;).ModuleInfo} */</span>
        <span class="token comment">// @ts-ignore-next</span>
        <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token constant">MODULES</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> mod<span class="token punctuation">)</span>
      <span class="token keyword">return</span> mod<span class="token punctuation">.</span>info
    <span class="token punctuation">}</span>

    <span class="token function">getModuleIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token constant">MODULES</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">addWatchFile</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      watchFiles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
      <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_addedImports <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_addedImports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token function">ensureWatchedFile</span><span class="token punctuation">(</span>watcher<span class="token punctuation">,</span> id<span class="token punctuation">,</span> root<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">getWatchFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>watchFiles<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token literal-property property">container</span><span class="token operator">:</span> PluginContainer <span class="token operator">=</span> <span class="token punctuation">{</span>

    <span class="token comment">//\u6CE8\u610F\uFF0Coptions\u662F\u4E00\u4E2A\u7ACB\u5373\u8C03\u7528\u51FD\u6570\uFF0C\u63D2\u4EF6\u7684options hook \u5728\u6B64\u65F6\u6267\u884C\uFF0C\u5B83\u53EF\u4EE5\u76F4\u63A5\u662F\u914D\u7F6E\u5BF9\u8C61\uFF0C\u4E5F\u53EF\u4EE5\u662F\u8FD4\u56DE\u914D\u7F6E\u5BF9\u8C61\u7684\u51FD\u6570</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> options <span class="token operator">=</span> rollupOptions
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>plugin<span class="token punctuation">.</span>options<span class="token punctuation">)</span> <span class="token keyword">continue</span>
        options <span class="token operator">=</span>
          <span class="token punctuation">(</span><span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>minimalContext<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> options
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>acornInjectPlugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parser <span class="token operator">=</span> acorn<span class="token punctuation">.</span>Parser<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>
          <span class="token operator">...</span><span class="token punctuation">[</span>
            acornClassFields<span class="token punctuation">,</span>
            acornStaticClassFeatures<span class="token punctuation">,</span>
            acornNumericSeparator
          <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>acornInjectPlugins<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        acorn<span class="token punctuation">,</span>
        <span class="token literal-property property">acornInjectPlugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token operator">...</span>options
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token keyword">async</span> <span class="token function">buildStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
        plugins<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">plugin</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>buildStart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> plugin<span class="token punctuation">.</span><span class="token function">buildStart</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
              <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token keyword">as</span> any<span class="token punctuation">,</span>
              container<span class="token punctuation">.</span>options <span class="token keyword">as</span> NormalizedInputOptions
            <span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token keyword">async</span> <span class="token function">resolveId</span><span class="token punctuation">(</span>rawId<span class="token punctuation">,</span> importer <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> skips<span class="token punctuation">,</span> ssr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      ctx<span class="token punctuation">.</span>ssr <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>ssr
      ctx<span class="token punctuation">.</span>_resolveSkips <span class="token operator">=</span> skips
      <span class="token keyword">const</span> resolveStart <span class="token operator">=</span> isDebug <span class="token operator">?</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span>

      <span class="token keyword">let</span> <span class="token literal-property property">id</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token keyword">const</span> <span class="token literal-property property">partial</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>PartialResolvedId<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>plugin<span class="token punctuation">.</span>resolveId<span class="token punctuation">)</span> <span class="token keyword">continue</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>skips<span class="token operator">?.</span><span class="token function">has</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>

        ctx<span class="token punctuation">.</span>_activePlugin <span class="token operator">=</span> plugin

        <span class="token keyword">const</span> pluginResolveStart <span class="token operator">=</span> isDebug <span class="token operator">?</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">resolveId</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
          ctx <span class="token keyword">as</span> any<span class="token punctuation">,</span>
          rawId<span class="token punctuation">,</span>
          importer<span class="token punctuation">,</span>
          <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
          ssr
        <span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token keyword">continue</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          id <span class="token operator">=</span> result
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          id <span class="token operator">=</span> result<span class="token punctuation">.</span>id
          Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>partial<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        isDebug <span class="token operator">&amp;&amp;</span>
          <span class="token function">debugPluginResolve</span><span class="token punctuation">(</span>
            <span class="token function">timeFrom</span><span class="token punctuation">(</span>pluginResolveStart<span class="token punctuation">)</span><span class="token punctuation">,</span>
            plugin<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
            <span class="token function">prettifyUrl</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> root<span class="token punctuation">)</span>
          <span class="token punctuation">)</span>

        <span class="token comment">// resolveId() is hookFirst - first non-null result is returned.</span>
        <span class="token keyword">break</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>isDebug <span class="token operator">&amp;&amp;</span> rawId <span class="token operator">!==</span> id <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>rawId<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token constant">FS_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> key <span class="token operator">=</span> rawId <span class="token operator">+</span> id
        <span class="token comment">// avoid spamming</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>seenResolves<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          seenResolves<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token function">debugResolve</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">timeFrom</span><span class="token punctuation">(</span>resolveStart<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>chalk<span class="token punctuation">.</span><span class="token function">cyan</span><span class="token punctuation">(</span>rawId<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>chalk<span class="token punctuation">.</span><span class="token function">dim</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        partial<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token function">isExternalUrl</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">?</span> id <span class="token operator">:</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
        <span class="token keyword">return</span> partial <span class="token keyword">as</span> PartialResolvedId
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token keyword">async</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> ssr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      ctx<span class="token punctuation">.</span>ssr <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>ssr
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>plugin<span class="token punctuation">.</span>load<span class="token punctuation">)</span> <span class="token keyword">continue</span>
        ctx<span class="token punctuation">.</span>_activePlugin <span class="token operator">=</span> plugin
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx <span class="token keyword">as</span> any<span class="token punctuation">,</span> id<span class="token punctuation">,</span> ssr<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> result
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token keyword">async</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id<span class="token punctuation">,</span> inMap<span class="token punctuation">,</span> ssr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformContext</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> code<span class="token punctuation">,</span> inMap <span class="token keyword">as</span> SourceMap<span class="token punctuation">)</span>
      ctx<span class="token punctuation">.</span>ssr <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>ssr
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>plugin<span class="token punctuation">.</span>transform<span class="token punctuation">)</span> <span class="token keyword">continue</span>
        ctx<span class="token punctuation">.</span>_activePlugin <span class="token operator">=</span> plugin
        ctx<span class="token punctuation">.</span>_activeId <span class="token operator">=</span> id
        ctx<span class="token punctuation">.</span>_activeCode <span class="token operator">=</span> code
        <span class="token keyword">const</span> start <span class="token operator">=</span> isDebug <span class="token operator">?</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span>
        <span class="token keyword">let</span> <span class="token literal-property property">result</span><span class="token operator">:</span> TransformResult <span class="token operator">|</span> string <span class="token operator">|</span> <span class="token keyword">undefined</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          result <span class="token operator">=</span> <span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx <span class="token keyword">as</span> any<span class="token punctuation">,</span> code<span class="token punctuation">,</span> id<span class="token punctuation">,</span> ssr<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          ctx<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token keyword">continue</span>
        isDebug <span class="token operator">&amp;&amp;</span>
          <span class="token function">debugPluginTransform</span><span class="token punctuation">(</span>
            <span class="token function">timeFrom</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">,</span>
            plugin<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
            <span class="token function">prettifyUrl</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> root<span class="token punctuation">)</span>
          <span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          code <span class="token operator">=</span> result<span class="token punctuation">.</span>code <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>map<span class="token punctuation">)</span> ctx<span class="token punctuation">.</span>sourcemapChain<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>map<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          code <span class="token operator">=</span> result
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        code<span class="token punctuation">,</span>
        <span class="token literal-property property">map</span><span class="token operator">:</span> ctx<span class="token punctuation">.</span><span class="token function">_getCombinedSourcemap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">watchChange</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> event <span class="token operator">=</span> <span class="token string">&#39;update&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>watchFiles<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>plugin<span class="token punctuation">.</span>watchChange<span class="token punctuation">)</span> <span class="token keyword">continue</span>
          ctx<span class="token punctuation">.</span>_activePlugin <span class="token operator">=</span> plugin
          plugin<span class="token punctuation">.</span><span class="token function">watchChange</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx <span class="token keyword">as</span> any<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token punctuation">{</span> event <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token keyword">async</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token keyword">return</span>
      <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
        plugins<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>buildEnd <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">buildEnd</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
        plugins<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>closeBundle <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">closeBundle</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      closed <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> container
<span class="token punctuation">}</span>
</code></pre></div>`,36),e=[o];function c(l,u,k,i,r,d){return a(),s("div",null,e)}var f=n(t,[["render",c]]);export{g as __pageData,f as default};
