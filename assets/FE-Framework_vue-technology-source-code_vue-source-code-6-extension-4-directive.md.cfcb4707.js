import{_ as n,c as s,o as a,a as t}from"./app.fa011131.js";var p="/assets/vue-source-constructor-instance.e2da78de.png",o="/assets/vue-source-compiler-render-patch.c29e9a13.png";const f='{"title":"\u6307\u4EE4\u7CFB\u7EDF directive","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u6A21\u677F\u7F16\u8BD1\u9636\u6BB5 parse \u89E3\u6790\u6307\u4EE4","slug":"\u6A21\u677F\u7F16\u8BD1\u9636\u6BB5-parse-\u89E3\u6790\u6307\u4EE4"},{"level":3,"title":"parseStartTag => match.attrs","slug":"parsestarttag-match-attrs"},{"level":3,"title":"handleStartTag => \u5BF9\u8C61\u5F62\u5F0F attrs","slug":"handlestarttag-\u5BF9\u8C61\u5F62\u5F0F-attrs"},{"level":3,"title":"options.start \u5904\u7406\u90E8\u5206\u6307\u4EE4 v-pre / v-for / v-if / v-once","slug":"options-start-\u5904\u7406\u90E8\u5206\u6307\u4EE4-v-pre-v-for-v-if-v-once"},{"level":3,"title":"processElement \u51FD\u6570\u5904\u7406 key / ref / is / v-slot / class","slug":"processelement-\u51FD\u6570\u5904\u7406-key-ref-is-v-slot-class"},{"level":3,"title":"processAttrs \u51FD\u6570\u5904\u7406\u5269\u4F59\u6307\u4EE4","slug":"processattrs-\u51FD\u6570\u5904\u7406\u5269\u4F59\u6307\u4EE4"},{"level":2,"title":"\u6A21\u677F\u7F16\u8BD1\u9636\u6BB5 generate \u751F\u6210\u6307\u4EE4\u7ED3\u679C","slug":"\u6A21\u677F\u7F16\u8BD1\u9636\u6BB5-generate-\u751F\u6210\u6307\u4EE4\u7ED3\u679C"},{"level":3,"title":"genElement \u51FD\u6570\u5904\u7406 v-once / v-for / v-if / is / v-slot","slug":"genelement-\u51FD\u6570\u5904\u7406-v-once-v-for-v-if-is-v-slot"},{"level":3,"title":"genData \u51FD\u6570\u5904\u7406\u5269\u4F59\u6307\u4EE4","slug":"gendata-\u51FD\u6570\u5904\u7406\u5269\u4F59\u6307\u4EE4"},{"level":3,"title":"genDirective \u51FD\u6570\u5904\u7406 v-show / v-html / v-text / v-model \u53CA\u81EA\u5B9A\u4E49\u6307\u4EE4","slug":"gendirective-\u51FD\u6570\u5904\u7406-v-show-v-html-v-text-v-model-\u53CA\u81EA\u5B9A\u4E49\u6307\u4EE4"},{"level":3,"title":"genHandlers \u51FD\u6570\u5904\u7406 v-on \u4E8B\u4EF6","slug":"genhandlers-\u51FD\u6570\u5904\u7406-v-on-\u4E8B\u4EF6"},{"level":2,"title":"\u6E32\u67D3\u9636\u6BB5 patch \u6267\u884C\u6307\u4EE4\u5904\u7406\u7A0B\u5E8F","slug":"\u6E32\u67D3\u9636\u6BB5-patch-\u6267\u884C\u6307\u4EE4\u5904\u7406\u7A0B\u5E8F"}],"relativePath":"FE-Framework/vue-technology-source-code/vue-source-code-6-extension-4-directive.md"}',e={},c=t('<h1 id="\u6307\u4EE4\u7CFB\u7EDF-directive" tabindex="-1">\u6307\u4EE4\u7CFB\u7EDF directive <a class="header-anchor" href="#\u6307\u4EE4\u7CFB\u7EDF-directive" aria-hidden="true">#</a></h1><p>Vue \u5728\u6A21\u677F\u4E2D\u4F7F\u7528\u7684\u6307\u4EE4\u96C6\u4E3B\u8981\u6709\u4E24\u7C7B\uFF1A\u6846\u67B6\u5B9A\u4E49\u7684\u6307\u4EE4\u548C\u7528\u6237\u81EA\u5B9A\u4E49\u6307\u4EE4</p><p>Vue \u6846\u67B6\u5DF2\u5B9A\u4E49\u7684\u6307\u4EE4\u6709\uFF1A</p><ul><li>v-show</li><li>v-if / v-else / v-else-if</li><li>v-for</li><li>v-text</li><li>v-html</li><li>v-model</li><li>v-on</li><li>v-bind</li><li>v-slot</li><li>v-pre</li><li>v-once</li><li>v-cloak</li></ul><p>\u7ECF\u8FC7\u524D\u9762\u7AE0\u8282\u5185\u5BB9\u7684\u7406\u89E3\uFF0C\u6211\u4EEC\u77E5\u9053 Vue \u9879\u76EE\u8FD0\u884C\u4F1A\u7ECF\u8FC7\u4EE5\u4E0B\u51E0\u4E2A\u6B65\u9AA4\uFF1A</p><ol><li>\u5B8C\u6210 Vue \u6784\u9020\u51FD\u6570\u521D\u59CB\u5316\uFF1A\u6784\u9020\u51FD\u6570\u53CA\u539F\u751F\u5BF9\u8C61\u65B9\u6CD5\u6302\u8F7D</li><li>\u5B8C\u6210 new Vue \u5B9E\u4F8B\u5316\uFF1A\u5B9E\u4F8B\u5C5E\u6027\u548C\u65B9\u6CD5\u6302\u8F7D</li><li>template \u6A21\u677F\u5982\u679C\u6709\u7684\u8BDD\uFF0C\u6A21\u677F\u7F16\u8BD1 compiler: parse =&gt; optimize =&gt; generate\uFF0C\u751F\u6210\u4EE3\u7801\u5B57\u7B26\u4E32</li><li>\u6E32\u67D3\u51FD\u6570 render \u8C03\u7528\u751F\u6210 vnode (new VNode)</li><li>patch \u751F\u6210\u771F\u5B9E DOM \u5E76\u6302\u8F7D\u663E\u793A\u89C6\u56FE</li></ol><p><img src="'+p+'" alt=""><img src="'+o+`" alt=""></p><p><div class="table-of-contents"><ul><li><a href="#\u6A21\u677F\u7F16\u8BD1\u9636\u6BB5-parse-\u89E3\u6790\u6307\u4EE4">\u6A21\u677F\u7F16\u8BD1\u9636\u6BB5 parse \u89E3\u6790\u6307\u4EE4</a><ul><li><a href="#parsestarttag-match-attrs">parseStartTag =&gt; match.attrs</a></li><li><a href="#handlestarttag-\u5BF9\u8C61\u5F62\u5F0F-attrs">handleStartTag =&gt; \u5BF9\u8C61\u5F62\u5F0F attrs</a></li><li><a href="#options-start-\u5904\u7406\u90E8\u5206\u6307\u4EE4-v-pre-v-for-v-if-v-once">options.start \u5904\u7406\u90E8\u5206\u6307\u4EE4 v-pre / v-for / v-if / v-once</a></li><li><a href="#processelement-\u51FD\u6570\u5904\u7406-key-ref-is-v-slot-class">processElement \u51FD\u6570\u5904\u7406 key / ref / is / v-slot / class</a></li><li><a href="#processattrs-\u51FD\u6570\u5904\u7406\u5269\u4F59\u6307\u4EE4">processAttrs \u51FD\u6570\u5904\u7406\u5269\u4F59\u6307\u4EE4</a></li></ul></li><li><a href="#\u6A21\u677F\u7F16\u8BD1\u9636\u6BB5-generate-\u751F\u6210\u6307\u4EE4\u7ED3\u679C">\u6A21\u677F\u7F16\u8BD1\u9636\u6BB5 generate \u751F\u6210\u6307\u4EE4\u7ED3\u679C</a><ul><li><a href="#genelement-\u51FD\u6570\u5904\u7406-v-once-v-for-v-if-is-v-slot">genElement \u51FD\u6570\u5904\u7406 v-once / v-for / v-if / is / v-slot</a></li><li><a href="#gendata-\u51FD\u6570\u5904\u7406\u5269\u4F59\u6307\u4EE4">genData \u51FD\u6570\u5904\u7406\u5269\u4F59\u6307\u4EE4</a></li><li><a href="#gendirective-\u51FD\u6570\u5904\u7406-v-show-v-html-v-text-v-model-\u53CA\u81EA\u5B9A\u4E49\u6307\u4EE4">genDirective \u51FD\u6570\u5904\u7406 v-show / v-html / v-text / v-model \u53CA\u81EA\u5B9A\u4E49\u6307\u4EE4</a></li><li><a href="#genhandlers-\u51FD\u6570\u5904\u7406-v-on-\u4E8B\u4EF6">genHandlers \u51FD\u6570\u5904\u7406 v-on \u4E8B\u4EF6</a></li></ul></li><li><a href="#\u6E32\u67D3\u9636\u6BB5-patch-\u6267\u884C\u6307\u4EE4\u5904\u7406\u7A0B\u5E8F">\u6E32\u67D3\u9636\u6BB5 patch \u6267\u884C\u6307\u4EE4\u5904\u7406\u7A0B\u5E8F</a></li></ul></div></p><p>\u8FD9\u4E00\u8282\u5173\u4E8E Vue \u6307\u4EE4\u7CFB\u7EDF\uFF0C\u4E3B\u8981\u96C6\u4E2D\u5728\u6A21\u677F\u7F16\u8BD1\u548C\u89C6\u56FE\u6E32\u67D3\u8FC7\u7A0B\u4E2D\u3002</p><h2 id="\u6A21\u677F\u7F16\u8BD1\u9636\u6BB5-parse-\u89E3\u6790\u6307\u4EE4" tabindex="-1">\u6A21\u677F\u7F16\u8BD1\u9636\u6BB5 parse \u89E3\u6790\u6307\u4EE4 <a class="header-anchor" href="#\u6A21\u677F\u7F16\u8BD1\u9636\u6BB5-parse-\u89E3\u6790\u6307\u4EE4" aria-hidden="true">#</a></h2><p>\u6A21\u677F\u4E2D\u7684\u6307\u4EE4\u8BED\u6CD5\u90FD\u662F\u5199\u5728\u5F00\u59CB\u6807\u7B7E\u4E2D\uFF0C\u6240\u4EE5\u6307\u4EE4\u7684\u7F16\u8BD1\u4E5F\u662F\u5728\u6A21\u677F\u5F00\u59CB\u6807\u7B7E\u7684\u5904\u7406\u96C6\u4E2D\u5728 <code>options.start</code> \u548C <code>processAttrs</code> \u51FD\u6570\u4E2D\u3002</p><p>\u51FD\u6570\u8C03\u7528\u5168\u8DEF\u5F84\u662F <code>$moun =&gt; compileToFunctions =&gt; baseCompile =&gt; parse =&gt; parseHTML =&gt; parseStartTag =&gt; handleStartTag =&gt; options.start =&gt; processPre / processFor / processIf / processOnce / closeElement =&gt; processElement =&gt; processKey / processRef / processSlotContent / processComponent / processAttrs =&gt; processModifiers / processFilters / addProp / addAttr / addHandler / addDirective</code></p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">parseHTML</span> <span class="token punctuation">(</span><span class="token parameter">html<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token comment">// \u7701\u7565\u4EE3\u7801...</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastTag <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isPlainTextElement</span><span class="token punctuation">(</span>lastTag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> textEnd <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>textEnd <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>
        <span class="token keyword">var</span> startTagMatch <span class="token operator">=</span> <span class="token function">parseStartTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>startTagMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">handleStartTag</span><span class="token punctuation">(</span>startTagMatch<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldIgnoreFirstNewline</span><span class="token punctuation">(</span>startTagMatch<span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">advance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">advance</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    index <span class="token operator">+=</span> n<span class="token punctuation">;</span>
    html <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="parsestarttag-match-attrs" tabindex="-1">parseStartTag =&gt; match.attrs <a class="header-anchor" href="#parsestarttag-match-attrs" aria-hidden="true">#</a></h3><p>\u5728 parseStartTag \u51FD\u6570\u4E2D\u4E3B\u8981\u5FAA\u73AF\u5904\u7406\uFF0C\u5F53\u4E0D\u662F\u7ED3\u675F\u6807\u7B7E\uFF0C\u5E76\u4E14\u542B\u6709\u52A8\u6001\u7ED1\u5B9A\u6216\u666E\u901A\u5C5E\u6027\u65F6\u5FAA\u73AF\u5339\u914D\uFF0C\u5C06\u5339\u914D\u7ED3\u679C\u63A8\u5165 match.attrs</p><div class="language-js"><pre><code><span class="token comment">// var attribute = /^\\s*([^\\s&quot;&#39;&lt;&gt;\\/=]+)(?:\\s*(=)\\s*(?:&quot;([^&quot;]*)&quot;+|&#39;([^&#39;]*)&#39;+|([^\\s&quot;&#39;=&lt;&gt;\`]+)))?/;</span>
  <span class="token comment">// var dynamicArgAttribute = /^\\s*((?:v-[\\w-]+:|@|:|#)\\[[^=]+\\][^\\s&quot;&#39;&lt;&gt;\\/=]*)(?:\\s*(=)\\s*(?:&quot;([^&quot;]*)&quot;+|&#39;([^&#39;]*)&#39;+|([^\\s&quot;&#39;=&lt;&gt;\`]+)))?/;</span>
  <span class="token comment">// var ncname = &quot;[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z&quot; + (unicodeRegExp.source) + &quot;]*&quot;;</span>
  <span class="token comment">// var qnameCapture = &quot;((?:&quot; + ncname + &quot;\\\\:)?&quot; + ncname + &quot;)&quot;;</span>
  <span class="token comment">// var startTagOpen = new RegExp((&quot;^&lt;&quot; + qnameCapture));</span>
  <span class="token comment">// var startTagClose = /^\\s*(\\/?)&gt;/;</span>
  <span class="token keyword">function</span> <span class="token function">parseStartTag</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> start <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startTagOpen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> match <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">tagName</span><span class="token operator">:</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">start</span><span class="token operator">:</span> index
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token function">advance</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> end<span class="token punctuation">,</span> attr<span class="token punctuation">;</span>
      <span class="token comment">// \u5FAA\u73AF\u5904\u7406\uFF1A\u4E0D\u662F\u7ED3\u675F\u6807\u7B7E\uFF0C\u5E76\u4E14\u542B\u6709\u52A8\u6001\u7ED1\u5B9A\u6216\u666E\u901A\u5C5E\u6027\u65F6\u5FAA\u73AF\u5339\u914D\uFF0C\u5C06\u5339\u914D\u7ED3\u679C\u63A8\u5165 match.attrs</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>end <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startTagClose<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>attr <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>dynamicArgAttribute<span class="token punctuation">)</span> <span class="token operator">||</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        attr<span class="token punctuation">.</span>start <span class="token operator">=</span> index<span class="token punctuation">;</span>
        <span class="token function">advance</span><span class="token punctuation">(</span>attr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        attr<span class="token punctuation">.</span>end <span class="token operator">=</span> index<span class="token punctuation">;</span>
        match<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// match \u6355\u83B7\u7684\u7ED3\u679Cattr\uFF0C\u662F\u4E00\u4E2A\u5D4C\u5957\u6570\u7EC4\uFF0C\u53EF\u4EE5\u5728\u63A7\u5236\u53F0\u6253\u5370:</span>
        <span class="token comment">/**
         * \u4E3E\u4F8B\uFF1A\`id=&quot;test_id&quot;\`.match(attribute)
         * \u8FD4\u56DE\uFF1A[&quot;id=&quot;test_id&quot;&quot;, &quot;id&quot;, &quot;=&quot;, &quot;test_id&quot;, index: 0, input: &quot;id=&quot;test_id&quot;]
        */</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        match<span class="token punctuation">.</span>unarySlash <span class="token operator">=</span> end<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u662F\u5426\u662F\u4E00\u5143\u6807\u7B7E &lt;img&gt;\u3001&lt;br/&gt;</span>
        <span class="token function">advance</span><span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        match<span class="token punctuation">.</span>end <span class="token operator">=</span> index<span class="token punctuation">;</span>
        <span class="token keyword">return</span> match
      <span class="token punctuation">}</span>
      <span class="token comment">/**
       * \u4E3E\u4F8B\uFF1A&lt;div id=&quot;test_id&quot;&gt;&lt;/div&gt;
       * return match = {
       *  tagName: &quot;div&quot;,
       *  attrs: [[&quot;id=&quot;test_id&quot;&quot;, &quot;id&quot;, &quot;=&quot;, &quot;test_id&quot;, index: 0, input: &quot;id=&quot;test_id&quot;, start:5, end:17]],
       *  unarySlash: null
       *  start: 2
       *  end: 10
       * };
      */</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre></div><h3 id="handlestarttag-\u5BF9\u8C61\u5F62\u5F0F-attrs" tabindex="-1">handleStartTag =&gt; \u5BF9\u8C61\u5F62\u5F0F attrs <a class="header-anchor" href="#handlestarttag-\u5BF9\u8C61\u5F62\u5F0F-attrs" aria-hidden="true">#</a></h3><p>\u63A5\u7740\u662F\u6267\u884C handleStartTag \u51FD\u6570\uFF0C\u5C06 match.attrs \u6570\u7EC4\u5143\u7D20\u5904\u7406\u6210\u5BF9\u8C61\u5F62\u5F0F attrs</p><div class="language-"><pre><code> match.attrs: 
 [[&quot;id=&quot;test_id&quot;&quot;, &quot;id&quot;, &quot;=&quot;, &quot;test_id&quot;, index: 0, input: &quot;id=&quot;test_id&quot;, start:0, end:9], [&quot;@click=&quot;onClick&quot;, &quot;@click&quot;, &quot;=&quot;, &quot;onClick&quot;, index: 0, input: &quot;@click=&quot;onClick&quot;&quot;, start: 11, end: 27]],
handleStartTag \u7ED3\u679C\uFF1A
attrs: [{name: &#39;id&#39;, value: &quot;test-di&quot;, start:0, end:9},{name: &quot;@click&quot;, value: &quot;onClick&quot;, start: 11, end: 27}]
</code></pre></div><p>\u7136\u540E\u5728 handleStartTag \u51FD\u6570\u6700\u540E\u5C06\u5904\u7406\u597D\u7684 attrs \u4F5C\u4E3A\u5B9E\u53C2\u8C03\u7528 <code>options.start(tagName, attrs, unary, match.start, match.end)</code></p><h3 id="options-start-\u5904\u7406\u90E8\u5206\u6307\u4EE4-v-pre-v-for-v-if-v-once" tabindex="-1">options.start \u5904\u7406\u90E8\u5206\u6307\u4EE4 v-pre / v-for / v-if / v-once <a class="header-anchor" href="#options-start-\u5904\u7406\u90E8\u5206\u6307\u4EE4-v-pre-v-for-v-if-v-once" aria-hidden="true">#</a></h3><p>\u5728 options.start \u51FD\u6570\u4E2D\u7B2C\u4E00\u4EF6\u4E8B\u521B\u5EFA\u4E00\u4E2A ASTElement \u5BF9\u8C61\uFF0C\u7136\u540E\u89E3\u6790\u90E8\u5206\u6307\u4EE4\u5C31\u662F\u5F80\u8FD9\u4E2A\u5BF9\u8C61\u6DFB\u52A0\u5BF9\u5E94\u7684 key-value</p><blockquote><p>start \u51FD\u6570\u662F\u4F5C\u4E3A parseHTML \u51FD\u6570\u8C03\u7528\u7684\u5B9E\u53C2\u4F20\u5165\u7684\u3002</p></blockquote><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">parse</span> <span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>
  <span class="token function">parseHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>
    <span class="token function-variable function">start</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tag<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> unary<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u7701\u7565\u4EE3\u7801...</span>

      <span class="token comment">// inVPre = false</span>
      <span class="token comment">// v-pre \u6307\u4EE4\uFF1A\u8DF3\u8FC7\u8FD9\u4E2A\u5143\u7D20\u548C\u5B83\u7684\u5B50\u5143\u7D20\u7684\u7F16\u8BD1\u8FC7\u7A0B\u3002\u53EF\u4EE5\u7528\u6765\u663E\u793A\u539F\u59CB Mustache \u6807\u7B7E</span>
      <span class="token comment">// function processPre (el) {</span>
      <span class="token comment">//   if (getAndRemoveAttr(el, &#39;v-pre&#39;) != null) {</span>
      <span class="token comment">//     el.pre = true;</span>
      <span class="token comment">//   }</span>
      <span class="token comment">// }</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inVPre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// processPre \u89E3\u6790\u5143\u7D20\u4E2D\u662F\u5426\u6709\u5305\u542B v-pre \u6307\u4EE4</span>
        <span class="token function">processPre</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          inVPre <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// platformIsPreTag = options.isPreTag = function (tag) { return tag === &#39;pre&#39;; };</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">platformIsPreTag</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        inPre <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>inVPre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5982\u679C\u5143\u7D20\u6709 v-pre \u6307\u4EE4\uFF0C\u5219 processRawAttrs \u662F\u5C06 element.attrsList \u4E2D\u7684\u5C5E\u6027\u4E00\u4E2A\u4E2A\u590D\u5236\u6302\u8F7D\u5230 element.attrs \u4E0A</span>
        <span class="token function">processRawAttrs</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">.</span>processed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// structural directives</span>
        <span class="token comment">// \u5BF9\u7ED3\u6784\u6027\u6307\u4EE4 v-for / v-if / v-once \u9700\u8981\u5355\u72EC\u5904\u7406</span>
        <span class="token comment">/**
         * \u6570\u7EC4\u904D\u5386
         * v-for=&quot;(item, index) in list&quot;
         * element.for = list
         * element.alias = item
         * element.iterator1 = index
         */</span>
        <span class="token comment">/**
         * \u5BF9\u8C61\u904D\u5386
         * v-for=&quot;(value, key, index) in object
         * element.for = list
         * element.alias = item
         * element.iterator1 = key
         * element.iterator2 = index
        */</span>
        <span class="token function">processFor</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// v-if=&quot;showModal&quot; =&gt; el.if=&quot;showModal&quot; el.ifConditions = [{exp: &quot;showModal&quot;, block: el}]</span>
        <span class="token comment">// v-else =&gt; el.else = true</span>
        <span class="token comment">// v-else-if=&quot;!showModal&quot; =&gt; el.elseif = &quot;!showModal&quot;</span>
        <span class="token function">processIf</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// v-once =&gt; element.once = true</span>
        <span class="token function">processOnce</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// \u5982\u679C\u89E3\u6790\u5F53\u524D\u7EC4\u4EF6\u7684\u6839\u8282\u70B9\u8FD8\u672A\u5B9A\u4E49\uFF0C\u90A3\u6B64\u65F6\u7684 element \u5C31\u662F\u6839\u8282\u70B9\u3002\u56E0\u4E3A template \u7684\u89E3\u6790\u662F\u4ECE\u524D\u5F80\u540E\u7684\uFF0C\u6240\u4EE5\u80AF\u5B9A\u662F root \u8282\u70B9\u6700\u5148\u89E3\u6790</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        root <span class="token operator">=</span> element<span class="token punctuation">;</span>
        <span class="token punctuation">{</span>
          <span class="token comment">// \u4E3B\u8981\u6821\u9A8C\u6839\u8282\u70B9\u4E0D\u80FD\u662F &lt;slot&gt; \u8282\u70B9\uFF0C\u6216\u8005 v-for \u4E0D\u80FD\u7528\u5728 template \u8282\u70B9\u4E0A\u3002</span>
          <span class="token function">checkRootConstraints</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// \u5982\u679C\u4E0D\u662F\u4E00\u5143\u6807\u7B7E\uFF0C\u5219\u5C06\u5F53\u524D\u5143\u7D20\u538B\u5165\u5806\u6808\uFF0C\u4EE5\u4FBF\u7ED3\u675F\u6807\u7B7E\u5339\u914D</span>
      <span class="token comment">// \u5426\u5219\uFF0C\u5219\u5904\u7406\u7ED3\u5C3E\u6807\u7B7E</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>unary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        currentParent <span class="token operator">=</span> element<span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">closeElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    end<span class="token punctuation">,</span>
    chars<span class="token punctuation">,</span>
    comment
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7701\u7565\u4EE3\u7801...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5728 options.start \u51FD\u6570\u4E2D\u5904\u7406\u4E86\u56DB\u79CD\u5185\u90E8\u6307\u4EE4\uFF1A v-pre \u3001 v-for \u3001 (v-if / v-else / v-else-if) \u3001 v-once\uFF0C\u7279\u522B\u6CE8\u610F v-for \u548C v-if \u6307\u4EE4\u751F\u6210\u7684 ASTElement \u5BF9\u8C61\u7684\u5C5E\u6027\u3002</p><p>\u5269\u4F59\u7684\u6307\u4EE4\u5904\u7406\uFF0C\u96C6\u4E2D\u5230\u6700\u540E\u8C03\u7528\u7684 closeElement \u51FD\u6570\u4E2D\u3002\u5B9E\u9645\u4E0A\u5728\u6B64\u51FD\u6570\u4E2D\u4E3B\u8981\u8C03\u7528 parseElement \u51FD\u6570</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">closeElement</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inVPre <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>element<span class="token punctuation">.</span>processed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    element <span class="token operator">=</span> <span class="token function">processElement</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u7701\u7565\u4EE3\u7801...</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="processelement-\u51FD\u6570\u5904\u7406-key-ref-is-v-slot-class" tabindex="-1">processElement \u51FD\u6570\u5904\u7406 key / ref / is / v-slot / class <a class="header-anchor" href="#processelement-\u51FD\u6570\u5904\u7406-key-ref-is-v-slot-class" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">processElement</span> <span class="token punctuation">(</span> <span class="token parameter">element<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// element.key = keyValue\uFF0C\u5E76\u4E14\u6821\u9A8C key \u4E0D\u80FD\u7528\u5728 template \u5143\u7D20\u4E0A\uFF0C\u4E5F\u4E0D\u80FD\u7528\u5728transition-group\u7684\u5B50\u5143\u7D20\u8EAB\u4E0A</span>
  <span class="token function">processKey</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// determine whether this is a plain element after</span>
  <span class="token comment">// removing structural attributes</span>
  <span class="token comment">// \u65E0\u683C\u5F0F\u7684\u6734\u7D20\u5143\u7D20\uFF0C\u5373\u6CA1\u6709\u7ED1\u5B9Akey,\u6CA1\u6709\u63D2\u69FD\uFF0C\u6CA1\u6709\u7ED1\u5B9A\u4EFB\u4F55\u5C5E\u6027\uFF0C\u5982 &lt;div&gt;this is plain element&lt;/div&gt;</span>
  element<span class="token punctuation">.</span>plain <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token operator">!</span>element<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span>
    <span class="token operator">!</span>element<span class="token punctuation">.</span>scopedSlots <span class="token operator">&amp;&amp;</span>
    <span class="token operator">!</span>element<span class="token punctuation">.</span>attrsList<span class="token punctuation">.</span>length
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// element.ref = refValue</span>
  <span class="token function">processRef</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u5904\u7406 v-solt \u6216\u8005\u65E7\u7248 slot-scope \u5C5E\u6027</span>
  <span class="token function">processSlotContent</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u5904\u7406 slot \u5143\u7D20\u7684\u7ED3\u5C3E\u6807\u7B7E &lt;slot/&gt; \uFF0C\u8BBE\u7F6E element.slotName=name \u5E76\u6821\u9A8C slot \u5143\u7D20\u4E0A\u4E0D\u80FD\u7ED1\u5B9A key</span>
  <span class="token function">processSlotOutlet</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// &lt;component :is=&quot;Child&quot;&gt;&lt;/component&gt; \u8BBE\u7F6E element.ecomponent = &#39;Child&#39;</span>
  <span class="token function">processComponent</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// transforms =&gt; transformNode\uFF0C\u5904\u7406 class \u5C5E\u6027\uFF0C\u5206\u9759\u6001 class \u548C\u52A8\u6001\u7ED1\u5B9A\u7684 class</span>
  <span class="token comment">// el.staticClass = JSON.stringify(staticClass), \u6BD4\u5982\uFF1A el.staticClass=&quot;&#39;test-class&#39;&quot;</span>
  <span class="token comment">// el.classBinding = classBinding; \u6BD4\u5982\uFF1A el.classBinding = &quot;{show?&#39;active&#39;:&#39;&#39;}&quot;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> transforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    element <span class="token operator">=</span> transforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">||</span> element<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">processAttrs</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> element
<span class="token punctuation">}</span>
</code></pre></div><p>\u8FD9\u91CC\u4E3B\u8981\u5173\u6CE8 processAttrs \u51FD\u6570\uFF0C\u96C6\u4E2D\u5904\u7406\u4E86\u5269\u4F59\u7684\u6307\u4EE4</p><h3 id="processattrs-\u51FD\u6570\u5904\u7406\u5269\u4F59\u6307\u4EE4" tabindex="-1">processAttrs \u51FD\u6570\u5904\u7406\u5269\u4F59\u6307\u4EE4 <a class="header-anchor" href="#processattrs-\u51FD\u6570\u5904\u7406\u5269\u4F59\u6307\u4EE4" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token comment">// var onRE = /^@|^v-on:/;</span>
<span class="token comment">// var dirRE = /^v-|^@|^:|^#/;</span>
<span class="token comment">// var argRE = /:(.*)$/;</span>
<span class="token comment">// var bindRE = /^:|^\\.|^v-bind:/;</span>
<span class="token comment">// var modifierRE = /\\.[^.\\]]+(?=[^\\]]*$)/g;</span>
<span class="token comment">// var dynamicArgRE = /^\\[.*\\]$/;</span>
<span class="token comment">// \u8FD9\u4E2A\u51FD\u6570\u5904\u7406\u4E86\u4FEE\u9970\u7B26\u3001\u4E8B\u4EF6\u8FC7\u6EE4\u5668\u3001\u4E8B\u4EF6\u7ED1\u5B9A</span>
<span class="token keyword">function</span> <span class="token function">processAttrs</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// attrsList: [{name: &#39;id&#39;, value: &#39;test_id&#39;,start,end}, {name: &#39;@click&#39;, value: &#39;onClick&#39;,start,end}]</span>
  <span class="token keyword">var</span> list <span class="token operator">=</span> el<span class="token punctuation">.</span>attrsList<span class="token punctuation">;</span>
  <span class="token keyword">var</span> i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> name<span class="token punctuation">,</span> rawName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> syncGen<span class="token punctuation">,</span> isDynamic<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    name <span class="token operator">=</span> rawName <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    value <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dirRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// dirRE = /^v-|^@|^:|^#/; \u5373\u5339\u914D v-on / @ / v-bind / : / v-slot / #</span>
      <span class="token comment">// mark element as dynamic</span>
      el<span class="token punctuation">.</span>hasBindings <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token comment">// modifiers \u89E3\u6790\u52A8\u6001\u5C5E\u6027\u4FEE\u9970\u7B26\uFF0C\u6BD4\u5982 @click.stop, v-bind:show.sync</span>
      <span class="token comment">// modifiers = {sync: true, native: true}</span>
      modifiers <span class="token operator">=</span> <span class="token function">parseModifiers</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>dirRE<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// support .foo shorthand syntax for the .prop modifier</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>modifierRE<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>bindRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// v-bind:attr or :attr</span>
        name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>bindRE<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u89E3\u6790\u8FC7\u6EE4\u5668</span>
        value <span class="token operator">=</span> <span class="token function">parseFilters</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        isDynamic <span class="token operator">=</span> dynamicArgRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6BD4\u5982\uFF1A v-bind:[eventName]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isDynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">warn$2</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span><span class="token string">&quot;The value for a v-bind expression cannot be empty. Found in \\&quot;v-bind:&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// \u5C06name\u9A7C\u5CF0\u5316</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span>prop <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isDynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            name <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;innerHtml&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token string">&#39;innerHTML&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span>camel <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isDynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            name <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// \u5982\u679C v-bind:show.sync=value\uFF0C\u5219\u9700\u8981\u6DFB\u52A0 update:show \u7684\u4E8B\u4EF6</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span>sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            syncGen <span class="token operator">=</span> <span class="token function">genAssignmentCode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&quot;$event&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isDynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">addHandler</span><span class="token punctuation">(</span>
                el<span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token string">&quot;update:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">camelize</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                syncGen<span class="token punctuation">,</span>
                <span class="token keyword">null</span><span class="token punctuation">,</span>
                <span class="token boolean">false</span><span class="token punctuation">,</span>
                warn$2<span class="token punctuation">,</span>
                list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
              <span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hyphenate</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token function">camelize</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">addHandler</span><span class="token punctuation">(</span>
                  el<span class="token punctuation">,</span>
                  <span class="token punctuation">(</span><span class="token string">&quot;update:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">hyphenate</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  syncGen<span class="token punctuation">,</span>
                  <span class="token keyword">null</span><span class="token punctuation">,</span>
                  <span class="token boolean">false</span><span class="token punctuation">,</span>
                  warn$2<span class="token punctuation">,</span>
                  list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              <span class="token comment">// handler w/ dynamic event name</span>
              <span class="token function">addHandler</span><span class="token punctuation">(</span>
                el<span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token string">&quot;\\&quot;update:\\&quot;+(&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                syncGen<span class="token punctuation">,</span>
                <span class="token keyword">null</span><span class="token punctuation">,</span>
                <span class="token boolean">false</span><span class="token punctuation">,</span>
                warn$2<span class="token punctuation">,</span>
                list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token boolean">true</span> <span class="token comment">// dynamic</span>
              <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>modifiers <span class="token operator">&amp;&amp;</span> modifiers<span class="token punctuation">.</span>prop<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>
          <span class="token operator">!</span>el<span class="token punctuation">.</span>component <span class="token operator">&amp;&amp;</span> <span class="token function">platformMustUseProp</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">.</span>type<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">addProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> isDynamic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">addAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> isDynamic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>onRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// v-on @</span>
        name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>onRE<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        isDynamic <span class="token operator">=</span> dynamicArgRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isDynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u89E3\u6790\u4E8B\u4EF6\u5404\u79CD\u4FEE\u9970\u7B26\uFF0C\u6700\u540E\u6DFB\u52A0 el.events \u6216 el.nativeEvents \u6570\u7EC4\u4E2D\u50A8\u5B58\u7740 handler</span>
        <span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> warn$2<span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> isDynamic<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// normal directives v-show v-text v-html v-model \u548C \u81EA\u5B9A\u4E49\u6307\u4EE4</span>
        name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>dirRE<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// parse arg</span>
        <span class="token keyword">var</span> argMatch <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>argRE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> arg <span class="token operator">=</span> argMatch <span class="token operator">&amp;&amp;</span> argMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        isDynamic <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>dynamicArgRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arg <span class="token operator">=</span> arg<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            isDynamic <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// el.directives</span>
        <span class="token function">addDirective</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> name<span class="token punctuation">,</span> rawName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> isDynamic<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;model&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">checkForAliasModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// literal attribute \u6587\u5B57\u5C5E\u6027 title href src</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">parseText</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> delimiters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">warn$2</span><span class="token punctuation">(</span>
            name <span class="token operator">+</span> <span class="token string">&quot;=\\&quot;&quot;</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">&quot;\\&quot;: &quot;</span> <span class="token operator">+</span>
            <span class="token string">&#39;Interpolation inside attributes has been removed. &#39;</span> <span class="token operator">+</span>
            <span class="token string">&#39;Use v-bind or the colon shorthand instead. For example, &#39;</span> <span class="token operator">+</span>
            <span class="token string">&#39;instead of &lt;div id=&quot;{{ val }}&quot;&gt;, use &lt;div :id=&quot;val&quot;&gt;.&#39;</span><span class="token punctuation">,</span>
            list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// el.attrs \u6216 el.dynamicAttrs</span>
      <span class="token function">addAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// #6887 firefox doesn&#39;t update muted state if set via attribute</span>
      <span class="token comment">// even immediately after element creation</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el<span class="token punctuation">.</span>component <span class="token operator">&amp;&amp;</span>
          name <span class="token operator">===</span> <span class="token string">&#39;muted&#39;</span> <span class="token operator">&amp;&amp;</span>
          <span class="token function">platformMustUseProp</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">.</span>type<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>processAttrs \u5904\u7406\u4E86\u5404\u79CD\u6307\u4EE4\uFF0C\u6211\u4EEC\u4E3B\u8981\u5173\u6CE8\u5404\u79CD\u6307\u4EE4\u5904\u7406\u540E\u7684\u503C\u3002</p><ul><li>\u5982\u679C\u5B58\u5728\u52A8\u6001\u7ED1\u5B9A\u5C5E\u6027\uFF0Cel.hasBinding = true</li><li>v-bind \u6307\u4EE4\u5982\u679C\u4F5C\u7528\u5728\u7EC4\u4EF6\u4E0A\uFF0C\u4F1A\u8C03\u7528 addAttrs \u5B58\u5165 el.attrs = [] \u6570\u7EC4\u4E2D\uFF0C\u5982\u679C\u662F\u5143\u7D20\uFF0C\u4F1A\u8C03\u7528 addProp \u5B58\u50A8 el.props = [] \u6570\u7EC4\u4E2D\uFF0C\u6BCF\u4E2A\u5B58\u5165\u7684\u5143\u7D20\u90FD\u5305\u542B\u89E3\u6790\u51FA\u6765\u7684\u6307\u4EE4\u4FEE\u9970\u7B26\u5BF9\u8C61 modifiers</li><li>v-on \u6307\u4EE4\u4F1A\u901A\u8FC7 addHandler \u51FD\u6570\uFF0C\u533A\u5206\u662F\u5426\u6709 .native \u4FEE\u9970\u7B26\uFF0C\u5206\u522B\u5B58\u5165 el.events \u548C el.nativeEvents \u6570\u7EC4\u4E2D</li><li>\u5269\u4F59\u6307\u4EE4 v-show / v-text / v-html / v-model \u548C \u81EA\u5B9A\u4E49\u6307\u4EE4\u4F1A\u5B58\u50A8 el.directives \u6570\u7EC4\u4E2D</li><li>\u5982\u679C\u662F\u5E38\u89C4\u7684\u9759\u6001\u5C5E\u6027\uFF0C\u5982 title / href \u4E4B\u7C7B\uFF0C\u540C v-bind \u7C7B\u4F3C\u5B58\u5165 el.props \u6216 el.attrs \u6570\u7EC4\u4E2D\u3002</li></ul><div class="language-js"><pre><code>ASTElement <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// \u7528\u4E8E\u7EC4\u4EF6\uFF0C\u9759\u6001\u5C5E\u6027</span>
  <span class="token literal-property property">dynamicAttrs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// \u7528\u4E8E\u7EC4\u4EF6 v-bind</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// \u666E\u901A\u5143\u7D20\u5C5E\u6027</span>
  <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// v-on</span>
  <span class="token literal-property property">nativeEvents</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// v-on:click.native \u7528\u4E8E\u7EC4\u4EF6</span>
  <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// v-text v-html v-show v-model \u81EA\u5B9A\u4E49\u6307\u4EE4</span>
  <span class="token literal-property property">pre</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span> <span class="token comment">// v-pre</span>
  <span class="token keyword">if</span><span class="token operator">:</span> exp<span class="token punctuation">,</span> <span class="token comment">// v-if</span>
  <span class="token literal-property property">ifConditions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>exp<span class="token punctuation">,</span>block<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token keyword">else</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span> <span class="token comment">// v-else</span>
  <span class="token literal-property property">elseif</span><span class="token operator">:</span> exp<span class="token punctuation">,</span> <span class="token comment">// v-else-if</span>
  <span class="token keyword">for</span><span class="token operator">:</span> object<span class="token punctuation">,</span> <span class="token comment">// v-for</span>
  <span class="token literal-property property">alias</span><span class="token operator">:</span> item<span class="token punctuation">,</span>
  <span class="token literal-property property">iterator1</span><span class="token operator">:</span> key<span class="token punctuation">,</span>
  <span class="token literal-property property">iterator2</span><span class="token operator">:</span> index<span class="token punctuation">,</span>
  <span class="token literal-property property">once</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span> <span class="token comment">// v-once</span>
  <span class="token literal-property property">slot</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// v-slot</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> keyValue<span class="token punctuation">,</span> <span class="token comment">// :key=&quot;keyValue&quot;</span>
  <span class="token literal-property property">ref</span><span class="token operator">:</span> refValue<span class="token punctuation">,</span> <span class="token comment">// ref=&quot;refValue&quot;</span>
  <span class="token literal-property property">staticClass</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// class=&quot;test&quot;</span>
  <span class="token literal-property property">classBinding</span><span class="token operator">:</span> String <span class="token comment">// :class=&quot;bindTest&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u4E4B\u540E\uFF0Cparse \u51FD\u6570\u6267\u884C\u5B8C\u6BD5\uFF0C\u751F\u6210\u5D4C\u5957\u7684 ASTElement \u5143\u7D20\u5F62\u6210 AST \u6811\u3002\u4F20\u5165 optimize(ast,optons)\uFF0C\u5904\u7406\u540E\u518D\u4F20\u5165 generate(ast,optons)\u51FD\u6570\u3002</p><h2 id="\u6A21\u677F\u7F16\u8BD1\u9636\u6BB5-generate-\u751F\u6210\u6307\u4EE4\u7ED3\u679C" tabindex="-1">\u6A21\u677F\u7F16\u8BD1\u9636\u6BB5 generate \u751F\u6210\u6307\u4EE4\u7ED3\u679C <a class="header-anchor" href="#\u6A21\u677F\u7F16\u8BD1\u9636\u6BB5-generate-\u751F\u6210\u6307\u4EE4\u7ED3\u679C" aria-hidden="true">#</a></h2><p>\u5728 parse \u9636\u6BB5\uFF0C\u901A\u8FC7 processXXX \u51FD\u6570\u89E3\u6790\u4E86\u5F00\u59CB\u6807\u7B7E\u5185\u7684\u5404\u79CD\u5C5E\u6027\u548C\u6307\u4EE4\uFF0C\u5B58\u5165\u4E86 ASTElement \u5BF9\u8C61\u7684\u5BF9\u5E94\u7684\u5C5E\u6027\u4E2D\u3002</p><p>\u5728 generate \u51FD\u6570\u4E2D\uFF0C\u5219\u4F1A\u901A\u8FC7 genXXX \u51FD\u6570\u5904\u7406 ASTElement \u5BF9\u8C61\u4E2D\u6307\u4EE4\u7684\u5404\u4E2A\u5C5E\u6027\u7684\u503C\u3002</p><p>\u51FD\u6570\u8C03\u7528\u5168\u8DEF\u5F84\u662F <code>generate(ast,options) =&gt; genElement(ast, state) =&gt; genStatic / genOnce / genFor / genIf / genChildren / genSlot / genComponent / genData =&gt; genDirectives / genProps / genHandlers / genScopedSlots</code></p><p>Vue \u6709\u4E00\u4E9B\u5185\u7F6E\u6307\u4EE4\u5728\u5185\u90E8\u662F\u81EA\u5DF1\u5B9E\u73B0\u7684\uFF0C\u9488\u5BF9\u8FD9\u4E9B\u6307\u4EE4\u7684\u5904\u7406\u51FD\u6570\u662F\u901A\u8FC7\u5728 state \u5B9E\u53C2\u4F20\u5165\u7684\uFF0C\u5305\u62EC v-show / v-model / v-text / v-show</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">generate</span> <span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// options = baseOptions</span>
  <span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodegenState</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6DFB\u52A0\u90E8\u5206options</span>
  <span class="token keyword">var</span> code <span class="token operator">=</span> ast <span class="token operator">?</span> <span class="token function">genElement</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;_c(&quot;div&quot;)&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">&quot;with(this){return &quot;</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">staticRenderFns</span><span class="token operator">:</span> state<span class="token punctuation">.</span>staticRenderFns
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token function-variable function">CodegenState</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">CodegenState</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>warn <span class="token operator">=</span> options<span class="token punctuation">.</span>warn <span class="token operator">||</span> baseWarn<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>transforms <span class="token operator">=</span> <span class="token function">pluckModuleFunction</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token string">&#39;transformCode&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dataGenFns <span class="token operator">=</span> <span class="token function">pluckModuleFunction</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token string">&#39;genData&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>directives <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> baseDirectives<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>directives<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> isReservedTag <span class="token operator">=</span> options<span class="token punctuation">.</span>isReservedTag <span class="token operator">||</span> no<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">maybeComponent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>el<span class="token punctuation">.</span>component <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isReservedTag</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>onceId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>staticRenderFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u8FD9\u91CC\u6307\u4EE4\u7684\u4EE3\u7801 <code>this.directives = extend(extend({}, baseDirectives), options.directives);</code>\uFF0C\u5176\u4E2D\uFF1Aoptions.directives \u662F\u5728 <code>createCompiler(baseOptions)</code> \u4F20\u5165\u7684 baseOptions</p><div class="language-js"><pre><code><span class="token keyword">var</span> baseOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">expectHTML</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">modules</span><span class="token operator">:</span> modules$1<span class="token punctuation">,</span>
  <span class="token literal-property property">directives</span><span class="token operator">:</span> directives$1<span class="token punctuation">,</span>
  <span class="token literal-property property">isPreTag</span><span class="token operator">:</span> isPreTag<span class="token punctuation">,</span>
  <span class="token literal-property property">isUnaryTag</span><span class="token operator">:</span> isUnaryTag<span class="token punctuation">,</span>
  <span class="token literal-property property">mustUseProp</span><span class="token operator">:</span> mustUseProp<span class="token punctuation">,</span>
  <span class="token literal-property property">canBeLeftOpenTag</span><span class="token operator">:</span> canBeLeftOpenTag<span class="token punctuation">,</span>
  <span class="token literal-property property">isReservedTag</span><span class="token operator">:</span> isReservedTag<span class="token punctuation">,</span>
  <span class="token literal-property property">getTagNamespace</span><span class="token operator">:</span> getTagNamespace<span class="token punctuation">,</span>
  <span class="token literal-property property">staticKeys</span><span class="token operator">:</span> <span class="token function">genStaticKeys</span><span class="token punctuation">(</span>modules$1<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> directives$1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">model</span><span class="token operator">:</span> model<span class="token punctuation">,</span>
  <span class="token literal-property property">text</span><span class="token operator">:</span> text<span class="token punctuation">,</span>
  <span class="token literal-property property">html</span><span class="token operator">:</span> html
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u5176\u4E2D\u5B9A\u4E49\u4E86 v-text / v-html / v-model \u6307\u4EE4\u7684\u5904\u7406\u7A0B\u5E8F\uFF1A</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">text</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">addProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;textContent&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;_s(&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">html</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">addProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;innerHTML&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;_s(&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">model</span> <span class="token punctuation">(</span>
  <span class="token parameter">el<span class="token punctuation">,</span>
  dir<span class="token punctuation">,</span>
  _warn</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  warn$1 <span class="token operator">=</span> _warn<span class="token punctuation">;</span>
  <span class="token keyword">var</span> value <span class="token operator">=</span> dir<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token keyword">var</span> modifiers <span class="token operator">=</span> dir<span class="token punctuation">.</span>modifiers<span class="token punctuation">;</span>
  <span class="token keyword">var</span> tag <span class="token operator">=</span> el<span class="token punctuation">.</span>tag<span class="token punctuation">;</span>
  <span class="token keyword">var</span> type <span class="token operator">=</span> el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">.</span>type<span class="token punctuation">;</span>

  <span class="token punctuation">{</span>
    <span class="token comment">// inputs with type=&quot;file&quot; are read only and setting the input&#39;s</span>
    <span class="token comment">// value will throw an error.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;input&#39;</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">===</span> <span class="token string">&#39;file&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn$1</span><span class="token punctuation">(</span>
        <span class="token string">&quot;&lt;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; v-model=\\&quot;&quot;</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">&quot;\\&quot; type=\\&quot;file\\&quot;&gt;:\\n&quot;</span> <span class="token operator">+</span>
        <span class="token string">&quot;File inputs are read only. Use a v-on:change listener instead.&quot;</span><span class="token punctuation">,</span>
        el<span class="token punctuation">.</span>rawAttrsMap<span class="token punctuation">[</span><span class="token string">&#39;v-model&#39;</span><span class="token punctuation">]</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">genComponentModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// component v-model doesn&#39;t need extra runtime</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;select&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">genSelect</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;input&#39;</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">===</span> <span class="token string">&#39;checkbox&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">genCheckboxModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;input&#39;</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">===</span> <span class="token string">&#39;radio&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">genRadioModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;input&#39;</span> <span class="token operator">||</span> tag <span class="token operator">===</span> <span class="token string">&#39;textarea&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">genDefaultModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token function">isReservedTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">genComponentModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// component v-model doesn&#39;t need extra runtime</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">warn$1</span><span class="token punctuation">(</span>
      <span class="token string">&quot;&lt;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; v-model=\\&quot;&quot;</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">&quot;\\&quot;&gt;: &quot;</span> <span class="token operator">+</span>
      <span class="token string">&quot;v-model is not supported on this element type. &quot;</span> <span class="token operator">+</span>
      <span class="token string">&#39;If you are working with contenteditable, it\\&#39;s recommended to &#39;</span> <span class="token operator">+</span>
      <span class="token string">&#39;wrap a library dedicated for that purpose inside a custom component.&#39;</span><span class="token punctuation">,</span>
      el<span class="token punctuation">.</span>rawAttrsMap<span class="token punctuation">[</span><span class="token string">&#39;v-model&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// ensure runtime directive metadata</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u81F3\u4E8E\u8FD9\u4E9B\u6307\u4EE4\u5904\u7406\u7A0B\u5E8F\u5728\u4F55\u65F6\u8C03\u7528\uFF0C\u5F85\u540E\u9762\u8BB2\u5230 genDirective \u51FD\u6570\u65F6\u8BB2\u89E3\u3002\u73B0\u5728\u6211\u4EEC\u91CD\u65B0\u6765\u770B generate \u51FD\u6570\uFF0C\u5B83\u4F1A\u8C03\u7528 <code>genElement(ast, state)</code>\uFF0C\u6211\u4EEC\u4E5F\u77E5\u9053 state \u4E2D\u6709\u90E8\u5206\u6307\u4EE4\u9700\u8981\u7684\u5904\u7406\u51FD\u6570\u3002</p><h3 id="genelement-\u51FD\u6570\u5904\u7406-v-once-v-for-v-if-is-v-slot" tabindex="-1">genElement \u51FD\u6570\u5904\u7406 v-once / v-for / v-if / is / v-slot <a class="header-anchor" href="#genelement-\u51FD\u6570\u5904\u7406-v-once-v-for-v-if-is-v-slot" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">genElement</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span>pre <span class="token operator">=</span> el<span class="token punctuation">.</span>pre <span class="token operator">||</span> el<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pre<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>staticRoot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>staticProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genStatic</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>once <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>onceProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genOnce</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>for <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>forProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genFor</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>if <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>ifProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genIf</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;template&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>slotTarget <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;void 0&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;slot&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genSlot</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// component or element</span>
    <span class="token keyword">var</span> code<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      code <span class="token operator">=</span> <span class="token function">genComponent</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">,</span> el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> data<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el<span class="token punctuation">.</span>plain <span class="token operator">||</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>pre <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span><span class="token function">maybeComponent</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        data <span class="token operator">=</span> <span class="token function">genData$2</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">var</span> children <span class="token operator">=</span> el<span class="token punctuation">.</span>inlineTemplate <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// &quot;_c(&#39;div&#39;, {attrs:{id:&#39;test-id&#39;}, children},&quot;</span>
      code <span class="token operator">=</span> <span class="token string">&quot;_c(&#39;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>data <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> data<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>children <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> children<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// module transforms</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      code <span class="token operator">=</span> state<span class="token punctuation">.</span>transforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> code
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u8FD9\u91CC\u6211\u4EEC\u4F8B\u4E3E\u51E0\u4E2A\u6211\u4EEC\u5173\u6CE8\u7684\u51FD\u6570\uFF1A</p><div class="language-js"><pre><code><span class="token comment">// v-once =&gt; _o</span>
<span class="token keyword">function</span> <span class="token function">genOnce</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  el<span class="token punctuation">.</span>onceProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>if <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>ifProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genIf</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>staticInFor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> parent <span class="token operator">=</span> el<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>for<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        key <span class="token operator">=</span> parent<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
        <span class="token keyword">break</span>
      <span class="token punctuation">}</span>
      parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token string">&quot;v-once can only be used inside v-for that is keyed. &quot;</span><span class="token punctuation">,</span>
        el<span class="token punctuation">.</span>rawAttrsMap<span class="token punctuation">[</span><span class="token string">&#39;v-once&#39;</span><span class="token punctuation">]</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">genElement</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;_o(&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">genElement</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>onceId<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genStatic</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// v-for =&gt; _l</span>
<span class="token keyword">function</span> <span class="token function">genFor</span> <span class="token punctuation">(</span>
  <span class="token parameter">el<span class="token punctuation">,</span>
  state<span class="token punctuation">,</span>
  altGen<span class="token punctuation">,</span>
  altHelper</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> exp <span class="token operator">=</span> el<span class="token punctuation">.</span>for<span class="token punctuation">;</span>
  <span class="token keyword">var</span> alias <span class="token operator">=</span> el<span class="token punctuation">.</span>alias<span class="token punctuation">;</span>
  <span class="token keyword">var</span> iterator1 <span class="token operator">=</span> el<span class="token punctuation">.</span>iterator1 <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>iterator1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> iterator2 <span class="token operator">=</span> el<span class="token punctuation">.</span>iterator2 <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>iterator2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">maybeComponent</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    el<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">&#39;slot&#39;</span> <span class="token operator">&amp;&amp;</span>
    el<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">&#39;template&#39;</span> <span class="token operator">&amp;&amp;</span>
    <span class="token operator">!</span>el<span class="token punctuation">.</span>key
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
      <span class="token string">&quot;&lt;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; v-for=\\&quot;&quot;</span> <span class="token operator">+</span> alias <span class="token operator">+</span> <span class="token string">&quot; in &quot;</span> <span class="token operator">+</span> exp <span class="token operator">+</span> <span class="token string">&quot;\\&quot;&gt;: component lists rendered with &quot;</span> <span class="token operator">+</span>
      <span class="token string">&quot;v-for should have explicit keys. &quot;</span> <span class="token operator">+</span>
      <span class="token string">&quot;See https://vuejs.org/guide/list.html#key for more info.&quot;</span><span class="token punctuation">,</span>
      el<span class="token punctuation">.</span>rawAttrsMap<span class="token punctuation">[</span><span class="token string">&#39;v-for&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token boolean">true</span> <span class="token comment">/* tip */</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  el<span class="token punctuation">.</span>forProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// avoid recursion</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>altHelper <span class="token operator">||</span> <span class="token string">&#39;_l&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;((&quot;</span> <span class="token operator">+</span> exp <span class="token operator">+</span> <span class="token string">&quot;),&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;function(&quot;</span> <span class="token operator">+</span> alias <span class="token operator">+</span> iterator1 <span class="token operator">+</span> iterator2 <span class="token operator">+</span> <span class="token string">&quot;){&quot;</span> <span class="token operator">+</span>
      <span class="token string">&quot;return &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>altGen <span class="token operator">||</span> genElement<span class="token punctuation">)</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    <span class="token string">&#39;})&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// v-if =&gt; (a)?_m(0):_m(1)</span>
<span class="token keyword">function</span> <span class="token function">genIf</span> <span class="token punctuation">(</span>
  <span class="token parameter">el<span class="token punctuation">,</span>
  state<span class="token punctuation">,</span>
  altGen<span class="token punctuation">,</span>
  altEmpty</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  el<span class="token punctuation">.</span>ifProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// avoid recursion</span>
  <span class="token keyword">return</span> <span class="token function">genIfConditions</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>ifConditions<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> altGen<span class="token punctuation">,</span> altEmpty<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genIfConditions</span> <span class="token punctuation">(</span>
  <span class="token parameter">conditions<span class="token punctuation">,</span>
  state<span class="token punctuation">,</span>
  altGen<span class="token punctuation">,</span>
  altEmpty</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>conditions<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> altEmpty <span class="token operator">||</span> <span class="token string">&#39;_e()&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> condition <span class="token operator">=</span> conditions<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">.</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>condition<span class="token punctuation">.</span>exp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)?&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">genTernaryExp</span><span class="token punctuation">(</span>condition<span class="token punctuation">.</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">genIfConditions</span><span class="token punctuation">(</span>conditions<span class="token punctuation">,</span> state<span class="token punctuation">,</span> altGen<span class="token punctuation">,</span> altEmpty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">genTernaryExp</span><span class="token punctuation">(</span>condition<span class="token punctuation">.</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// v-if with v-once should generate code like (a)?_m(0):_m(1)</span>
  <span class="token keyword">function</span> <span class="token function">genTernaryExp</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> altGen
      <span class="token operator">?</span> <span class="token function">altGen</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
      <span class="token operator">:</span> el<span class="token punctuation">.</span>once
        <span class="token operator">?</span> <span class="token function">genOnce</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">genElement</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// &lt;component :is=&#39;Child&#39;&gt; =&gt; _c(Child, data, children)</span>
<span class="token keyword">function</span> <span class="token function">genComponent</span> <span class="token punctuation">(</span>
  <span class="token parameter">componentName<span class="token punctuation">,</span>
  el<span class="token punctuation">,</span>
  state</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> children <span class="token operator">=</span> el<span class="token punctuation">.</span>inlineTemplate <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;_c(&quot;</span> <span class="token operator">+</span> componentName <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">genData$2</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>children <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> children<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="gendata-\u51FD\u6570\u5904\u7406\u5269\u4F59\u6307\u4EE4" tabindex="-1">genData \u51FD\u6570\u5904\u7406\u5269\u4F59\u6307\u4EE4 <a class="header-anchor" href="#gendata-\u51FD\u6570\u5904\u7406\u5269\u4F59\u6307\u4EE4" aria-hidden="true">#</a></h3><p>\u9664\u6B64\u4E4B\u5916\uFF0C\u5176\u5B83\u6307\u4EE4\u4E3B\u8981\u901A\u8FC7 genData \u51FD\u6570\u751F\u6210 _c \u51FD\u6570\u9700\u8981\u7684 data \u5B9E\u53C2\uFF1A</p><p>data \u662F\u4E00\u4E2A\u5BF9\u8C61\u5B57\u7B26\u4E32\uFF0C\u5404\u4E2A\u6307\u4EE4\u7684\u89E3\u6790\u503C\u6DFB\u52A0\u5230 key-value \u4E2D\u3002</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">genData$2</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   * data = {
   *  dirs: dirs,
   *  key: key,
   *  ref: ref
   * ...
   * }
   */</span>
  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">;</span>

  <span class="token comment">// directives first.</span>
  <span class="token comment">// directives may mutate the el&#39;s other properties before they are generated.</span>
  <span class="token keyword">var</span> dirs <span class="token operator">=</span> <span class="token function">genDirectives</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirs<span class="token punctuation">)</span> <span class="token punctuation">{</span> data <span class="token operator">+=</span> dirs <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token comment">// key</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token string">&quot;key:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ref</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token string">&quot;ref:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>ref<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>refInFor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token string">&quot;refInFor:true,&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// pre</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token string">&quot;pre:true,&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// record original tag name for components using &quot;is&quot; attribute</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token string">&quot;tag:\\&quot;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\&quot;,&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// module data generation functions</span>
  <span class="token comment">// dateGenFns =&gt; genData</span>
  <span class="token comment">// function genData (el) {</span>
  <span class="token comment">//   var data = &#39;&#39;;</span>
  <span class="token comment">//   if (el.staticClass) {</span>
  <span class="token comment">//     data += &quot;staticClass:&quot; + (el.staticClass) + &quot;,&quot;;</span>
  <span class="token comment">//   }</span>
  <span class="token comment">//   if (el.classBinding) {</span>
  <span class="token comment">//     data += &quot;class:&quot; + (el.classBinding) + &quot;,&quot;;</span>
  <span class="token comment">//   }</span>
  <span class="token comment">//   return data</span>
  <span class="token comment">// }</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>dataGenFns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> state<span class="token punctuation">.</span>dataGenFns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// attributes \u7EC4\u4EF6\u7684\u5C5E\u6027\u6DFB\u52A0\u5230\u4E86 data.attrs</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token string">&quot;attrs:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">genProps</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// DOM props \u8FD9\u91CC\u53EF\u4EE5\u770B\u5230\u4E4B\u524D\u5728 processAttrs \u4E2D\u9488\u5BF9\u666E\u901A\u5143\u7D20\u5904\u7406\u7684 el.props \u6539\u4E3A\u4E86 data.domPorps</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token string">&quot;domProps:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">genProps</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// event handlers \u4E8B\u4EF6\u5904\u7406\u8C03\u7528 genHandlers</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>events<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>events<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>nativeEvents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>nativeEvents<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// slot target</span>
  <span class="token comment">// only for non-scoped slots</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>slotTarget <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>slotScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token string">&quot;slot:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>slotTarget<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// scoped slots</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>scopedSlots<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">genScopedSlots</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> el<span class="token punctuation">.</span>scopedSlots<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// component v-model</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token string">&quot;model:{value:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>model<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,callback:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>model<span class="token punctuation">.</span>callback<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,expression:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>model<span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;},&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// inline-template</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>inlineTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> inlineTemplate <span class="token operator">=</span> <span class="token function">genInlineTemplate</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inlineTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      data <span class="token operator">+=</span> inlineTemplate <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;}&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// v-bind dynamic argument wrap</span>
  <span class="token comment">// v-bind with dynamic arguments must be applied using the same v-bind object</span>
  <span class="token comment">// merge helper so that class/style/mustUseProp attrs are handled correctly.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>dynamicAttrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">=</span> <span class="token string">&quot;_b(&quot;</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">&quot;,\\&quot;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\&quot;,&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">genProps</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>dynamicAttrs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// v-bind data wrap</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>wrapData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">wrapData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// v-on data wrap</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>wrapListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">wrapListeners</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> data
<span class="token punctuation">}</span>
</code></pre></div><p>genData \u51FD\u6570\u8FD9\u91CC\u5B9E\u9645\u4E0A\u76F4\u63A5\u5904\u7406\u4E86 v-bind \u89E3\u6790\u5230 ASTElement.props \u548C ASTElement.attrs \u4E2D\u7684\u6570\u636E\u3002\u8FD9\u91CC\u8FD8\u9700\u8981\u5173\u6CE8\u7684\u662F\u4E00\u5F00\u59CB\u5C31\u5904\u7406\u7684 genDirective \u51FD\u6570\uFF0C\u4EE5\u53CA\u9488\u5BF9 v-on \u7ED1\u5B9A\u7684\u4E8B\u4EF6 genHandlers \u51FD\u6570</p><h3 id="gendirective-\u51FD\u6570\u5904\u7406-v-show-v-html-v-text-v-model-\u53CA\u81EA\u5B9A\u4E49\u6307\u4EE4" tabindex="-1">genDirective \u51FD\u6570\u5904\u7406 v-show / v-html / v-text / v-model \u53CA\u81EA\u5B9A\u4E49\u6307\u4EE4 <a class="header-anchor" href="#gendirective-\u51FD\u6570\u5904\u7406-v-show-v-html-v-text-v-model-\u53CA\u81EA\u5B9A\u4E49\u6307\u4EE4" aria-hidden="true">#</a></h3><p>\u5728 parse \u9636\u6BB5\u7684 processAttrs \u4E2D\u7684 addDirective \u51FD\u6570\u4E2D\u6211\u4EEC\u628A\u8FD9\u4E9B\u6307\u4EE4\u90FD\u6DFB\u52A0\u5230\u4E86 ASTElement\u3002directives \u5C5E\u6027\u4E2D\u3002 \u7136\u540E\u5728 generate \u9636\u6BB5\u7684 genElement \u4E2D\u7684 genData \u4E2D\u8C03\u7528 genDirective \u51FD\u6570\u3002</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">genDirectives</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> dirs <span class="token operator">=</span> el<span class="token punctuation">.</span>directives<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dirs<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>
  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token string">&#39;directives:[&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> hasRuntime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> needRuntime<span class="token punctuation">;</span>

  <span class="token comment">// \u53D6\u51FA ASTElement.directives \u4E2D\u7684\u6240\u6709\u6307\u4EE4\u9010\u4E2A\u904D\u5386\u5904\u7406</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> dirs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dir <span class="token operator">=</span> dirs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    needRuntime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8FD9\u91CC\u8C03\u7528 state.directives \u5C31\u662F\u4E0A\u9762\u7279\u610F\u8BB2\u7684\u5728 genElement \u8C03\u7528\u524D\u521D\u59CB\u5316\u7684\u6B65\u9AA4\uFF1A</span>
    <span class="token comment">// \`this.directives = extend(extend({}, baseDirectives), options.directives);\`</span>
    <span class="token comment">// baseOptions.directives \u6709 v-html / v-text / v-model \u6307\u4EE4\u7684\u5904\u7406\u51FD\u6570\u8D4B\u503C\u7ED9\u4E86 gen</span>
    <span class="token keyword">var</span> gen <span class="token operator">=</span> state<span class="token punctuation">.</span>directives<span class="token punctuation">[</span>dir<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// gen \u53EA\u9488\u5BF9 v-html / v-text / v-model \u6307\u4EE4\uFF0C\u6267\u884C\u540Ei\u6CA1\u6709\u8FD4\u56DE\u503C\uFF0C\u6240\u4EE5 needRunTime = undefined</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>gen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// compile-time directive that manipulates AST.</span>
      <span class="token comment">// returns true if it also needs a runtime counterpart.</span>
      needRuntime <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token function">gen</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> state<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5982\u679C\u662F v-text \u6307\u4EE4\u76F8\u5F53\u4E8E\u8C03\u7528 text(el, dir) \u8FD4\u56DE undefined</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>needRuntime<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// v-show \u548C \u81EA\u5B9A\u4E49\u6307\u4EE4\u4F1A\u6267\u884C\u4E0B\u9762\u903B\u8F91\uFF0C\u5373\u5B8C\u6210\u62FC\u63A5 directives: [{},{}]</span>
      hasRuntime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      res <span class="token operator">+=</span> <span class="token string">&quot;{name:\\&quot;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\&quot;,rawName:\\&quot;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>rawName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\&quot;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>value <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&quot;,value:(&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;),expression:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>arg <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&quot;,arg:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>isDynamicArg <span class="token operator">?</span> dir<span class="token punctuation">.</span>arg <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">&quot;\\&quot;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>arg<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>modifiers <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&quot;,modifiers:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;},&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasRuntime<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// v-show \u548C \u81EA\u5B9A\u4E49\u6307\u4EE4\u4F1A\u6267\u884C\u4E0B\u9762\u903B\u8F91\uFF0C\u5373\u5B8C\u6210\u62FC\u63A5</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;]&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">text</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">addProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;textContent&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;_s(&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">html</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">addProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;innerHTML&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;_s(&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// function model () \u51FD\u6570\u4ECD\u65E7\u8C03\u7528\u4E86\u4E00\u7CFB\u5217 genXXX \u51FD\u6570\uFF0C\u6211\u4EEC\u770B\u4E0B\u5176\u4E2D\u4E00\u4E2A\u9488\u5BF9 input \u7684\u5904\u7406 genDefaultModel </span>
<span class="token keyword">function</span> <span class="token function">genDefaultModel</span> <span class="token punctuation">(</span>
    <span class="token parameter">el<span class="token punctuation">,</span>
    value<span class="token punctuation">,</span>
    modifiers</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> type <span class="token operator">=</span> el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">.</span>type<span class="token punctuation">;</span>

    <span class="token comment">// warn if v-bind:value conflicts with v-model</span>
    <span class="token comment">// except for inputs with v-bind:type</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">var</span> value$1 <span class="token operator">=</span> el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">[</span><span class="token string">&#39;v-bind:value&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">[</span><span class="token string">&#39;:value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> typeBinding <span class="token operator">=</span> el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">[</span><span class="token string">&#39;v-bind:type&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">[</span><span class="token string">&#39;:type&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value$1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>typeBinding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> binding <span class="token operator">=</span> el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">[</span><span class="token string">&#39;v-bind:value&#39;</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token string">&#39;v-bind:value&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;:value&#39;</span><span class="token punctuation">;</span>
        <span class="token function">warn$1</span><span class="token punctuation">(</span>
          binding <span class="token operator">+</span> <span class="token string">&quot;=\\&quot;&quot;</span> <span class="token operator">+</span> value$1 <span class="token operator">+</span> <span class="token string">&quot;\\&quot; conflicts with v-model on the same element &quot;</span> <span class="token operator">+</span>
          <span class="token string">&#39;because the latter already expands to a value binding internally&#39;</span><span class="token punctuation">,</span>
          el<span class="token punctuation">.</span>rawAttrsMap<span class="token punctuation">[</span>binding<span class="token punctuation">]</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> ref <span class="token operator">=</span> modifiers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> lazy <span class="token operator">=</span> ref<span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>
    <span class="token keyword">var</span> number <span class="token operator">=</span> ref<span class="token punctuation">.</span>number<span class="token punctuation">;</span>
    <span class="token keyword">var</span> trim <span class="token operator">=</span> ref<span class="token punctuation">.</span>trim<span class="token punctuation">;</span>
    <span class="token keyword">var</span> needCompositionGuard <span class="token operator">=</span> <span class="token operator">!</span>lazy <span class="token operator">&amp;&amp;</span> type <span class="token operator">!==</span> <span class="token string">&#39;range&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> event <span class="token operator">=</span> lazy
      <span class="token operator">?</span> <span class="token string">&#39;change&#39;</span>
      <span class="token operator">:</span> type <span class="token operator">===</span> <span class="token string">&#39;range&#39;</span>
        <span class="token operator">?</span> <span class="token constant">RANGE_TOKEN</span>
        <span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> valueExpression <span class="token operator">=</span> <span class="token string">&#39;$event.target.value&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>trim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      valueExpression <span class="token operator">=</span> <span class="token string">&quot;$event.target.value.trim()&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      valueExpression <span class="token operator">=</span> <span class="token string">&quot;_n(&quot;</span> <span class="token operator">+</span> valueExpression <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> code <span class="token operator">=</span> <span class="token function">genAssignmentCode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> valueExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>needCompositionGuard<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      code <span class="token operator">=</span> <span class="token string">&quot;if($event.target.composing)return;&quot;</span> <span class="token operator">+</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">addProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> event<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>trim <span class="token operator">||</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;blur&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$forceUpdate()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre></div><p>\u901A\u8FC7 genDirective \u51FD\u6570\uFF0C\u6211\u4EEC\u77E5\u9053\u5982\u4E0B\u7ED3\u679C\uFF1A</p><ul><li>v-html \u6307\u4EE4\u6267\u884C html \u51FD\u6570\uFF0C\u8C03\u7528 addProp \u51FD\u6570\uFF0C\u5411 ASTElement.props \u6570\u7EC4\u6DFB\u52A0 {name: &#39;innerHTML&#39;, ...} \u5BF9\u8C61</li><li>v-html \u6307\u4EE4\u6267\u884C text \u51FD\u6570\uFF0C\u8C03\u7528 addProp \u51FD\u6570\uFF0C\u5411 ASTElement.props \u6570\u7EC4\u6DFB\u52A0 {name: &#39;textContent&#39;, ...} \u5BF9\u8C61</li><li>v-model \u6307\u4EE4\u9488\u5BF9 input \u5143\u7D20\uFF0C\u8C03\u7528 addProp \u51FD\u6570\uFF0C\u6DFB\u52A0 {name: &#39;value&#39;, ...} \u5C5E\u6027\u548C\u8C03\u7528 addHandler \u51FD\u6570\u5411 el.events \u6570\u7EC4\u4E2D\u6DFB\u52A0 blur \u4E8B\u4EF6</li><li>\u5269\u4F59\u7684 v-show \u548C\u81EA\u5B9A\u4E49\u6307\u4EE4\u5219\u5411 data:{directives:[{v-show}, {\u81EA\u5B9A\u4E49\u6307\u4EE4}]}</li></ul><p>\u8FD9\u5C31\u662F\u4E3A\u4EC0\u4E48 genData \u51FD\u6570\u4E00\u5F00\u59CB\u5C31\u8C03\u7528 genDirective \u51FD\u6570\uFF0C\u56E0\u4E3A genDirective \u51FD\u6570\u5904\u7406\u903B\u8F91\u8FD8\u5728\u5411 ASTElement \u5BF9\u8C61\u5C5E\u6027\u4E2D\u6DFB\u52A0\u6570\u636E\u3002\u5FC5\u987B\u6267\u884C\u5728 genProp \u4E4B\u524D\u3002</p><h3 id="genhandlers-\u51FD\u6570\u5904\u7406-v-on-\u4E8B\u4EF6" tabindex="-1">genHandlers \u51FD\u6570\u5904\u7406 v-on \u4E8B\u4EF6 <a class="header-anchor" href="#genhandlers-\u51FD\u6570\u5904\u7406-v-on-\u4E8B\u4EF6" aria-hidden="true">#</a></h3><p><code>v-on:eventName.modifier=handler</code> \u4E8B\u4EF6\u6307\u4EE4\u5904\u7406\u51FD\u6570\u9700\u8981\u5904\u7406\u5404\u7C7B\u4FEE\u9970\u7B26\uFF0C\u589E\u52A0\u6216\u8865\u5168\u4E8B\u4EF6\u5904\u7406\u51FD\u6570\u7684\u4EE3\u7801\u3002\u6700\u7EC8\u7684\u7ED3\u679C\u662F\u5728 data \u4E2D\u5B8C\u6210 data.on \u548C data.nativeOn \u6570\u7EC4\u7684\u503C</p><div class="language-js"><pre><code><span class="token comment">// genData</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>events<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  data <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>events<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>nativeEvents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  data <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>nativeEvents<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// isNative \u5904\u7406 nativeEvent \u4E2D\u4E8B\u4EF6\uFF0C\u5373\u9488\u5BF9\u7EC4\u4EF6\u4E8B\u4EF6\u6709.native \u4FEE\u9970\u7B26\u3002</span>
<span class="token comment">// dynamic \u5C5E\u6027\u4EE3\u8868\u52A8\u6001\u83B7\u53D6\u4E8B\u4EF6\u540D\u7684\u5199\u6CD5\uFF1A v-on[dynamicEventName]=&quot;handler&quot;</span>
<span class="token keyword">function</span> <span class="token function">genHandlers</span> <span class="token punctuation">(</span>
  <span class="token parameter">events<span class="token punctuation">,</span>
  isNative</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> prefix <span class="token operator">=</span> isNative <span class="token operator">?</span> <span class="token string">&#39;nativeOn:&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;on:&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> staticHandlers <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> dynamicHandlers <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token keyword">in</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> handlerCode <span class="token operator">=</span> <span class="token function">genHandler</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> events<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      dynamicHandlers <span class="token operator">+=</span> name <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> handlerCode <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      staticHandlers <span class="token operator">+=</span> <span class="token string">&quot;\\&quot;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;\\&quot;:&quot;</span> <span class="token operator">+</span> handlerCode <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  staticHandlers <span class="token operator">=</span> <span class="token string">&quot;{&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>staticHandlers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dynamicHandlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> prefix <span class="token operator">+</span> <span class="token string">&quot;_d(&quot;</span> <span class="token operator">+</span> staticHandlers <span class="token operator">+</span> <span class="token string">&quot;,[&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dynamicHandlers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;])&quot;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> prefix <span class="token operator">+</span> staticHandlers
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genHandler</span> <span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;function(){}&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">genHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> isMethodPath <span class="token operator">=</span> simplePathRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> isFunctionExpression <span class="token operator">=</span> fnExpRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> isFunctionInvocation <span class="token operator">=</span> simplePathRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>fnInvokeRE<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handler<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isMethodPath <span class="token operator">||</span> isFunctionExpression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> handler<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;function($event){&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>isFunctionInvocation <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&quot;return &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> handler<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// inline statement</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> code <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> genModifierCode <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> handler<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>modifierCode<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        genModifierCode <span class="token operator">+=</span> modifierCode<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// stop: &#39;$event.stopPropagation();&#39;,</span>
        <span class="token comment">// left/right</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCodes<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;exact&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> modifiers <span class="token operator">=</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        genModifierCode <span class="token operator">+=</span> <span class="token function">genGuard</span><span class="token punctuation">(</span>
          <span class="token punctuation">[</span><span class="token string">&#39;ctrl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;alt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;meta&#39;</span><span class="token punctuation">]</span>
            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">keyModifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">!</span>modifiers<span class="token punctuation">[</span>keyModifier<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">keyModifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;$event.&quot;</span> <span class="token operator">+</span> keyModifier <span class="token operator">+</span> <span class="token string">&quot;Key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;||&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      code <span class="token operator">+=</span> <span class="token function">genKeyFilter</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Make sure modifiers like prevent and stop get executed after key filtering</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>genModifierCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      code <span class="token operator">+=</span> genModifierCode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> handlerCode <span class="token operator">=</span> isMethodPath
      <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&quot;return &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;($event)&quot;</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> isFunctionExpression
        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&quot;return (&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)($event)&quot;</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> isFunctionInvocation
          <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&quot;return &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token operator">:</span> handler<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;function($event){&quot;</span> <span class="token operator">+</span> code <span class="token operator">+</span> handlerCode <span class="token operator">+</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u81F3\u6B64\uFF0C\u5404\u4E2A\u6307\u4EE4\u5904\u7406\u5206\u5316\u7684\u7ED3\u679C\uFF1A</p><ul><li>v-show \u548C\u81EA\u5B9A\u4E49\u6307\u4EE4\uFF0C\u5B58\u5165\u4E86 data.directives \u6570\u7EC4\u4E2D</li><li>v-if / v-else / v-else-if \u5904\u7406\u6210 (a)?_m(0):_m(1)</li><li>v-for \u5904\u7406\u6210 _l</li><li>v-once \u5904\u7406\u6210 _o</li><li>v-text \u5411 data.domProps \u4E2D\u6DFB\u52A0 textContent \u5C5E\u6027</li><li>v-html \u5411 data.domProps \u4E2D\u6DFB\u52A0\u4E86 innerHTML \u5C5E\u6027</li><li>v-model \u5206\u522B\u5411 data.domProps \u4E2D\u6DFB\u52A0\u4E86 value \u5C5E\u6027\u548C\u5411 data.on \u6DFB\u52A0 input \u4E8B\u4EF6</li><li>v-on \u5411 data.on \u6DFB\u52A0\u4E8B\u4EF6</li><li>v-bind \u5206\u522B\u5411 data.attrs \u6216 data.domProps \u6570\u7EC4\u6DFB\u52A0\u6570\u636E</li><li>v-pre \u5B58\u5165\u4E86 data.pre:true</li></ul><div class="language-js"><pre><code><span class="token comment">// _createElement(tag, data, children)</span>
<span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> keyValue<span class="token punctuation">,</span>
  <span class="token literal-property property">ref</span><span class="token operator">:</span> refValue<span class="token punctuation">,</span>
  <span class="token literal-property property">pre</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span> ComponentName<span class="token punctuation">,</span>
  staticClass<span class="token punctuation">,</span>
  classBinding<span class="token punctuation">,</span>
  <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">domProps</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">nativeOn</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  slot<span class="token punctuation">,</span>
  <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span>value<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> expression<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u4E4B\u540E\u901A\u8FC7 vm._render \u8C03\u7528\u6267\u884C\u4EE3\u7801\u5B57\u7B26\u4E32\u7684 with \u8BED\u53E5\uFF0C\u8C03\u7528 createElement \u53CA\u5404\u79CD\u8F85\u52A9\u51FD\u6570\u751F\u6210\u865A\u62DF DOM \u6811\uFF0C\u5373\u5D4C\u5957\u7ED3\u6784\u7684 vnode \u8282\u70B9\u3002</p><p>\u6700\u540E\u5C06 vnode \u4F20\u5165 vm._update \u51FD\u6570\u4E2D\u6267\u884C patch \u51FD\u6570\uFF0C\u751F\u6210\u771F\u6B63\u7684 DOM \u5143\u7D20\u3002</p><h2 id="\u6E32\u67D3\u9636\u6BB5-patch-\u6267\u884C\u6307\u4EE4\u5904\u7406\u7A0B\u5E8F" tabindex="-1">\u6E32\u67D3\u9636\u6BB5 patch \u6267\u884C\u6307\u4EE4\u5904\u7406\u7A0B\u5E8F <a class="header-anchor" href="#\u6E32\u67D3\u9636\u6BB5-patch-\u6267\u884C\u6307\u4EE4\u5904\u7406\u7A0B\u5E8F" aria-hidden="true">#</a></h2><p>\u51FD\u6570\u8C03\u7528\u5168\u8DEF\u5F84\uFF1A <code>vm._update =&gt; createPatchFunction =&gt; patch =&gt; createElm =&gt; createComponnent / invokeCreateHooks =&gt; create =&gt; updateAttrs / updateClass / updateDOMListeners / updateDOMProps / updateStyle / updateDirectives</code></p><p>\u8FD9\u91CC\u5173\u6CE8 createElm \u51FD\u6570\uFF0C\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\u5206\u51FA\u4E24\u6761\u4E3B\u7EBF\uFF1A\u4E00\u6761\u662F\u7EC4\u4EF6\u521B\u5EFA\u5B9E\u4F8B\u5316\u8FC7\u7A0B\uFF0C\u53E6\u4E00\u4E2A\u662F\u666E\u901A\u5143\u7D20\u5904\u7406\u4E2D\u6267\u884C crate \u94A9\u5B50\u51FD\u6570\u5904\u7406\u5DF2\u521B\u5EFA\u7684\u771F\u5B9E dom \u5143\u7D20\u7684\u5404\u79CD\u5C5E\u6027 updateXXX \u5904\u7406\u51FD\u6570</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">createElm</span> <span class="token punctuation">(</span>
  <span class="token parameter">vnode<span class="token punctuation">,</span>
  insertedVnodeQueue<span class="token punctuation">,</span>
  parentElm<span class="token punctuation">,</span>
  refElm<span class="token punctuation">,</span>
  nested<span class="token punctuation">,</span>
  ownerArray<span class="token punctuation">,</span>
  index</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u7701\u7565\u65E0\u5173\u4EE3\u7801</span>

  <span class="token comment">// \u7B2C\u4E00\u6B65\u5C31\u662F\u7528\u5F53\u524D vnode \u5C1D\u8BD5\u521B\u5EFA\u7EC4\u4EF6\uFF0C\u5982\u679C\u4E0D\u80FD\u521B\u5EFA\u7EC4\u4EF6\u5219\u4F5C\u4E3A\u666E\u901A\u5143\u7D20\u5411\u4E0B\u5904\u7406\uFF0C\u5426\u5219\u6267\u884C\u521B\u5EFA\u7EC4\u4EF6\u903B\u8F91</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">createComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> data <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token keyword">var</span> children <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
  <span class="token keyword">var</span> tag <span class="token operator">=</span> vnode<span class="token punctuation">.</span>tag<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C\u662F\u4F5C\u4E3A\u666E\u901A\u5143\u7D20\u6807\u7B7E\uFF0C\u5219\u7528\u6807\u7B7E tag \u521B\u5EFA\u5143\u7D20 nodeOps.createElement(tag, vnode)\uFF0C\u4F46\u6682\u65F6\u8BE5\u5143\u7D20\u6CA1\u6709\u4EFB\u4F55\u5C5E\u6027\u548C\u4E8B\u4EF6\u7ED1\u5B9A\uFF0C\u76F8\u5F53\u521B\u5EFA\u4E00\u4E2A\u7A7A\u5BF9\u8C61\uFF0C\u8FD8\u6CA1\u6709\u4EFB\u4F55\u5C5E\u6027\u4E00\u6837\u3002</span>
    vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> vnode<span class="token punctuation">.</span>ns
      <span class="token operator">?</span> nodeOps<span class="token punctuation">.</span><span class="token function">createElementNS</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>ns<span class="token punctuation">,</span> tag<span class="token punctuation">)</span>
      <span class="token operator">:</span> nodeOps<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setScope</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// \u5C1D\u8BD5\u9012\u5F52\u521B\u5EFA\u5B50\u5143\u7D20</span>
      <span class="token function">createChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> children<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// \u5982\u679C\u6709 vnode.data \uFF0C\u5373 generate \u9636\u6BB5\u5904\u7406\u4F20\u7ED9 createElement \u51FD\u6570\u7684 data</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5173\u952E\u6B65\u9AA4\uFF1A\u6267\u884C\u5143\u7D20\u521B\u5EFA\u94A9\u5B50\u51FD\u6570 create\uFF0C\u5728\u8FD9\u91CC\u9762\u4F1A\u5411\u7A7A\u5143\u7D20\u6DFB\u52A0\u5C5E\u6027\u548C\u7ED1\u5B9A\u4E8B\u4EF6</span>
        <span class="token function">invokeCreateHooks</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// \u6700\u540E\u5411\u7236\u5143\u7D20\u63D2\u5165\u5F53\u524D\u521B\u5EFA\u7684\u65B0\u5143\u7D20</span>
      <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        creatingElmInVPre<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isComment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u6CE8\u91CA\u5143\u7D20</span>
      vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u6587\u672C\u5143\u7D20</span>
      vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre></div><p>\u6240\u4EE5\u770B\u4E0B\u51FD\u6570 invokeCreateHooks \u7684\u5B9A\u4E49\uFF1A</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">invokeCreateHooks</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> insertedVnodeQueue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i$1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i$1 <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>create<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i$1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cbs<span class="token punctuation">.</span>create<span class="token punctuation">[</span>i$1<span class="token punctuation">]</span><span class="token punctuation">(</span>emptyNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  i <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>hook<span class="token punctuation">;</span> <span class="token comment">// Reuse variable</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>create<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>emptyNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>insert<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> insertedVnodeQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5173\u952E\u7684\u662F\u6267\u884C cbs.create \u51FD\u6570\u3002cbs \u53D8\u91CF\u662F\u5728 patch \u51FD\u6570\u7684 createPatchFunction \u51FD\u6570\u4E2D\u4FDD\u5B58\u7740\u3002\u770B\u4E0B cbs \u7684\u521D\u59CB\u5316\u8FC7\u7A0B\uFF1A</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">createPatchFunction</span> <span class="token punctuation">(</span><span class="token parameter">backend</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
  <span class="token keyword">var</span> cbs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> modules <span class="token operator">=</span> backend<span class="token punctuation">.</span>modules<span class="token punctuation">;</span>
  <span class="token keyword">var</span> nodeOps <span class="token operator">=</span> backend<span class="token punctuation">.</span>nodeOps<span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hooks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cbs<span class="token punctuation">[</span>hooks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> modules<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>modules<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>hooks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cbs<span class="token punctuation">[</span>hooks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>modules<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>hooks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> hydrating<span class="token punctuation">,</span> removeOnly</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7701\u7565\u4EE3\u7801</span>
    <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u6240\u4EE5\u53EF\u4EE5\u770B\u5230\u5173\u952E\u662F modules \u5B9A\u4E49\uFF0C\u5B83\u5305\u542B\u4E24\u90E8\u5206\uFF1AplatformModules \u548C baseModules</p><div class="language-js"><pre><code><span class="token keyword">var</span> hooks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;create&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;activate&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;remove&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;destroy&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> baseModules <span class="token operator">=</span> <span class="token punctuation">[</span>
    ref<span class="token punctuation">,</span>
    directives
  <span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> platformModules <span class="token operator">=</span> <span class="token punctuation">[</span>
  attrs<span class="token punctuation">,</span>
  klass<span class="token punctuation">,</span>
  events<span class="token punctuation">,</span>
  domProps<span class="token punctuation">,</span>
  style<span class="token punctuation">,</span>
  transition
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><p>\u53EF\u4EE5\u770B\u5230 modules \u4E2D\u5B9A\u4E49\u4E86\u5143\u7D20\u4E2D\u5404\u4E2A\u5C5E\u6027\u5728\u5404\u4E2A\u94A9\u5B50\u51FD\u6570\u7684\u5904\u7406\u3002\u5C31\u5C5E\u6027\u548C\u4E8B\u4EF6\u4E3E\u4F8B\u6765\u8BF4\uFF1A</p><div class="language-js"><pre><code><span class="token keyword">var</span> events <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">create</span><span class="token operator">:</span> updateDOMListeners<span class="token punctuation">,</span>
  <span class="token literal-property property">update</span><span class="token operator">:</span> updateDOMListeners
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> attrs <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">create</span><span class="token operator">:</span> updateAttrs<span class="token punctuation">,</span>
  <span class="token literal-property property">update</span><span class="token operator">:</span> updateAttrs
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u7ECF\u8FC7 createPatchFunction \u51FD\u6570\u4E2D\u90A3\u6BB5\u4EE3\u7801\u8F6C\u5316\u540E\uFF0Ccbs \u5BF9\u8C61\u7ED3\u679C\u4E3A\uFF1A</p><div class="language-js"><pre><code><span class="token keyword">var</span> cbs <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">create</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    updateAttrs<span class="token punctuation">,</span>
    updateClass<span class="token punctuation">,</span>
    updateStyle<span class="token punctuation">,</span>
    updateDOMProps<span class="token punctuation">,</span>
    updateDOMListeners<span class="token punctuation">,</span>
    updateDirectives
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">update</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">activate</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">update</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">remove</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">destory</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u8FD9\u6837\u5728 createPatchFunction \u51FD\u6570\u751F\u6210patch\u51FD\u6570\u524D\u5C31\u5904\u7406\u597D\u4E86\uFF0C\u7136\u540E\u5728\u8C03\u7528 patch =&gt; createElm =&gt; invokeCreateHooks \u51FD\u6570\u4E2D\uFF1A</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">invokeCreateHooks</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> insertedVnodeQueue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i$1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i$1 <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>create<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i$1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6267\u884C\u5BF9\u5E94\u94A9\u5B50\u51FD\u6570</span>
    cbs<span class="token punctuation">.</span>create<span class="token punctuation">[</span>i$1<span class="token punctuation">]</span><span class="token punctuation">(</span>emptyNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  i <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>hook<span class="token punctuation">;</span> <span class="token comment">// Reuse variable</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>create<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>emptyNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>insert<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> insertedVnodeQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>cbs.create[i$1](emptyNode, vnode);</code>\u5373\u4F1A\u6267\u884C\u94A9\u5B50\u51FD\u6570create\uFF0C\u5373 cbs.create \u5185\u7684\u5168\u90E8\u94A9\u5B50\u3002</p><div class="language-js"><pre><code><span class="token parameter">updateAttrs</span> <span class="token operator">=&gt;</span> elm<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token parameter">updateClass</span> <span class="token operator">=&gt;</span> el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> cls<span class="token punctuation">)</span>
<span class="token parameter">updateStyle</span> <span class="token operator">=&gt;</span> <span class="token parameter">setProp</span> <span class="token operator">=&gt;</span> el<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
<span class="token parameter">updateDOMProps</span> <span class="token operator">=&gt;</span> elm<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>elm<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span> <span class="token operator">/</span> elm<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>elm<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span>
<span class="token parameter">updateDOMListeners</span> <span class="token operator">=&gt;</span> <span class="token parameter">updateListeners</span> <span class="token operator">=&gt;</span> add <span class="token operator">/</span> <span class="token parameter">remove</span><span class="token operator">=&gt;</span> target<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token operator">/</span> target<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
<span class="token parameter">updateDirectives</span> <span class="token operator">=&gt;</span> <span class="token parameter">_update</span> <span class="token operator">=&gt;</span> <span class="token function">callHook$1</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&#39;bind / update / insert / unbind&#39;</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode<span class="token punctuation">,</span> isDestroy<span class="token punctuation">)</span>
</code></pre></div>`,89),u=[c];function l(k,i,r,d,m,v){return a(),s("div",null,u)}var y=n(e,[["render",l]]);export{f as __pageData,y as default};
